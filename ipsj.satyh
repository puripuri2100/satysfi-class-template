@import: class-template
@require: list

module IPSJ : sig

  type position
  val top : position
  val here : position


  type config

  val document : config -> block-text -> document

  val default-config : config

  val set-title : inline-text list -> inline-text -> config -> config
  val set-author-multiline : inline-text list -> config -> config

  direct \author : [inline-text; inline-text; inline-text] inline-cmd

  direct +section : [string?; bool?; inline-text; block-text] block-cmd
  direct +p : [inline-text] block-cmd

  direct \footnote : [inline-text] inline-cmd

  direct +figure : [string?; position?; inline-text; block-text] block-cmd
  direct +table : [string?; position?; inline-text; block-text] block-cmd

  direct \url : [string] inline-cmd

  direct \ref : [string] inline-cmd
  direct \ref-page : [string] inline-cmd

  type bibitem
  val bibitem : string -> inline-text -> bibitem
  direct +thebibliography : [bibitem list] block-cmd
  direct \cite : [string list] inline-cmd

end = struct

  type position = ClassTemplate.position
  let top = ClassTemplate.top
  let here = ClassTemplate.here

  type config = ClassTemplate.config

  let document = ClassTemplate.document

  let font-size = 12pt
  let columnsep = 7mm

  let set-config c =
    c
    |> ClassTemplate.set-columnsep columnsep
    |> ClassTemplate.set-normal-font-size font-size
    |> ClassTemplate.set-top-margin 30mm
    |> ClassTemplate.set-bottom-margin 25mm
    |> ClassTemplate.set-left-margin 20mm
    |> ClassTemplate.set-right-margin 20mm
    |> ClassTemplate.set-multicolumn 2
    |> ClassTemplate.set-width-page 210mm
    |> ClassTemplate.set-height-page 297mm
    |> ClassTemplate.set-show-footer false
    |> ClassTemplate.set-show-header false

  let default-config =
    ClassTemplate.default-config
    |> set-config


  let set-title titleJp-lst titleEn config =
    let-rec sub lst =
      match lst with
      | [] -> [{\ClassTemplate.footnote?:({})(titleEn);}]
      | [x] -> [{#x;\ClassTemplate.footnote?:({})(titleEn);}]
      | x::xs -> x :: sub xs
    in
    ClassTemplate.set-title-multiline (sub titleJp-lst) config


  let-mutable author-count <- 0
  let-inline ctx \author affiliate name en =
    let () = author-count <- !author-count + 1 in
    let mark = embed-string (`*` ^ arabic !author-count) in
    let thanks = read-inline ctx {\ClassTemplate.thanks?:({#mark;}){#en;}} in
    let font-size = get-font-size ctx in
    let affiliate = read-inline ctx affiliate ++ thanks in
    let name = read-inline ctx name in
    let a-w = get-natural-width affiliate in
    let n-w = get-natural-width name in
    let width =
      if a-w >' n-w then
        a-w
      else
        n-w
    in
    embed-block-top ctx width (fun ctx -> (
      let a-space = (width -' a-w) *' 0.5 in
      let n-space = (width -' n-w) *' 0.5 in
      line-break true false ctx (inline-skip a-space ++ affiliate ++ inline-skip a-space)
      +++
      line-break false true ctx (inline-skip n-space ++ name ++ inline-skip n-space)
    ))

  let set-author-multiline = ClassTemplate.set-author-multiline



  % class-templateから必要なコマンドをラップして再公開


  let-block ctx +section ?:label-opt ?:is-omit-opt title inner =
    match (label-opt, is-omit-opt) with
    | (Some(label), Some(is-omit)) -> read-block ctx '<+ClassTemplate.section ?:(label) ?:(is-omit) (title) (inner);>
    | (Some(label), None)          -> read-block ctx '<+ClassTemplate.section ?:(label) (title) (inner);>
    | (None, Some(is-omit))        -> read-block ctx '<+ClassTemplate.section ?* ?:(is-omit) (title) (inner);>
    | (None, None)                 -> read-block ctx '<+ClassTemplate.section (title) (inner);>

  let-block +p it = '<+ClassTemplate.p(it);>



  let-inline \footnote inner = {\ClassTemplate.footnote (inner);}

  let-block ctx +figure ?:label-opt ?:pos-opt caption inner =
    match (label-opt, pos-opt) with
    | (Some(label), Some(pos)) -> read-block ctx '<+ClassTemplate.figure ?:(label) ?:(pos) (caption) (inner);>
    | (Some(label), None)      -> read-block ctx '<+ClassTemplate.figure ?:(label) (caption) (inner);>
    | (None, Some(pos))        -> read-block ctx '<+ClassTemplate.figure ?* ?:(pos) (caption) (inner);>
    | (None, None)             -> read-block ctx '<+ClassTemplate.figure (caption) (inner);>

  let-block ctx +table ?:label-opt ?:pos-opt caption inner =
    match (label-opt, pos-opt) with
    | (Some(label), Some(pos)) -> read-block ctx '<+ClassTemplate.table ?:(label) ?:(pos) (caption) (inner);>
    | (Some(label), None)      -> read-block ctx '<+ClassTemplate.table ?:(label) (caption) (inner);>
    | (None, Some(pos))        -> read-block ctx '<+ClassTemplate.table ?* ?:(pos) (caption) (inner);>
    | (None, None)             -> read-block ctx '<+ClassTemplate.table (caption) (inner);>

  let-inline \url url = {\ClassTemplate.url (url);}

  let-inline \ref      label = {\ClassTemplate.ref      (label);}
  let-inline \ref-page label = {\ClassTemplate.ref-page (label);}

  type bibitem = ClassTemplate.bibitem
  let bibitem = ClassTemplate.bibitem
  let-block ctx +thebibliography lst = read-block ctx '<+ClassTemplate.thebibliography (lst);>
  let-inline \cite lst = {\ClassTemplate.cite (lst);}

end
