@require: math
@require: color
@require: list
@require: annot
@require: vdecoset
@require: option
@require: pervasives

module Cls : sig

  type position
  val top : position
  val here : position

  type config

  val document : config -> block-text -> document

  val default-config : config
  val set-title : inline-text -> config -> config
  val set-title-multiline : inline-text list -> config -> config
  val set-title-str : string -> config -> config
  val set-author : inline-text -> config -> config
  val set-author-multiline : inline-text list -> config -> config
  val set-author-str : string -> config -> config
  val set-date : inline-text -> config -> config
  val set-subject : string -> config -> config
  val set-keywords : string list -> config -> config
  val set-show-title : bool -> config -> config
  val set-show-toc : bool -> config -> config
  val set-show-header : bool -> config -> config
  val set-show-footer : bool -> config -> config
  val set-title-page : bool -> config -> config
  val set-bib-page : bool -> config -> config
  val set-normal-font-size : length -> config -> config
  val set-leading-ratio : float -> config -> config
  val set-paragraph-margin-top-ratio : float -> config -> config
  val set-paragraph-margin-bottom-ratio : float -> config -> config
  val set-height-page : length -> config -> config
  val set-width-page : length -> config -> config
  val set-left-margin : length -> config -> config
  val set-right-margin : length -> config -> config
  val set-top-margin : length -> config -> config
  val set-bottom-margin : length -> config -> config
  val set-multicolumn : int -> config -> config
  val set-columnsep : length -> config -> config
  val set-abstract : block-text -> config -> config
  val set-thanks-marks : string list -> config -> config
  val set-footnote-mark : inline-text -> config -> config
  val set-text-font-cjk   : (string * float * float) -> config -> config
  val set-text-font-latin : (string * float * float) -> config -> config
  val set-headline-font-cjk   : (string * float * float) -> config -> config
  val set-headline-font-latin : (string * float * float) -> config -> config
  val set-toc-title : inline-text -> config -> config
  val set-figure-title : inline-text -> config -> config
  val set-table-title : inline-text -> config -> config
  val set-bib-title : inline-text -> config -> config

  direct +abstract : [inline-text?; block-text] block-cmd

  direct +section : [string?; bool?; string?; inline-text; block-text] block-cmd
  direct +p : [inline-text] block-cmd

  direct \footnote : [bool?; bool?; inline-text] inline-cmd

  direct \thanks : [inline-text] inline-cmd

  direct +figure : [string?; position?; inline-text; block-text] block-cmd
  direct +table : [string?; position?; inline-text; block-text] block-cmd

  direct \url : [string] inline-cmd

  direct \ref : [string] inline-cmd
  direct \ref-page : [string] inline-cmd

  type bibitem
  val bibitem : string -> inline-text -> bibitem
  direct +thebibliography : [bibitem list] block-cmd
  direct \cite : [string list] inline-cmd

end = struct

  type position =
    | Top
    | Here

  let top = Top
  let here = Here


  type font-info = (|
    text-cjk       : (string * float * float);
    text-latin     : (string * float * float);
    headline-cjk   : (string * float * float);
    headline-latin : (string * float * float);
  |)


  let default-font = (|
    text-cjk       = (`ipaexm`, 1.0, 0.0);
    text-latin     = (`ipaexm`, 1.0, 0.0);
    headline-cjk   = (`ipaexg`, 1.0, 0.0);
    headline-latin = (`lmsans`, 1.0, 0.0);
  |)


  % 設定の中身は単なるレコードだが、隠蔽することによって後方互換性を保てるようにする
  type config = (|
    title         : inline-text list;
    title-str     : string option;
    author        : inline-text list;
    author-str    : string option;
    date          : inline-text option;
    subject       : string option;
    keywords      : string list;
    show-title    : bool;
    show-toc      : bool;
    show-footer   : bool;
    show-header   : bool;
    title-page    : bool;
    bib-page      : bool;
    normal-font-size : length;
    leading-ratio : float;
    paragraph-margin-top-ratio : float;
    paragraph-margin-bottom-ratio : float;
    height-page   : length;
    width-page    : length;
    left-margin   : length;
    right-margin  : length;
    top-margin    : length;
    bottom-margin : length;
    multicolumn   : int;
    columnsep     : length;
    abstract      : block-text option;
    thanks-marks  : string list;
    footnote-mark : inline-text;
    font-info     : font-info;
    toc-title     : inline-text;
    figure-title  : inline-text;
    table-title   : inline-text;
    bib-title     : inline-text;
  |)


  let default-config = (|
    title         = [];
    title-str     = None;
    author        = [];
    author-str    = None;
    date          = None;
    subject       = None;
    keywords      = [];
    show-title    = true;
    show-toc      = false;
    show-footer   = true;
    show-header   = true;
    title-page    = false;
    bib-page      = false;
    normal-font-size = 12pt;
    leading-ratio = 0.3;
    paragraph-margin-top-ratio = 0.3;
    paragraph-margin-bottom-ratio = 0.3;
    height-page   = 297mm;
    width-page    = 210mm;
    left-margin   = (210mm -' (12pt *' 40.0)) *' 0.5;
    right-margin  = (210mm -' (12pt *' 40.0)) *' 0.5;
    top-margin    = 25mm;
    bottom-margin = 25mm;
    multicolumn   = 1;
    columnsep     = 20pt;
    abstract      = None;
    thanks-marks  = [`*`; `†`; `‡`];
    footnote-mark = {†};
    font-info     = default-font;
    toc-title     = {目次};
    figure-title  = {図};
    table-title   = {表};
    bib-title     = {参考文献};
  |)


  % configの中身を書き換えていく関数
  % こいつらの定義は愚直にやるしかない
  let set-title title config =
    (| config with title = [title]; |)

  let set-title-multiline title-lst config =
    (| config with title = title-lst; |)

  let set-title-str title-str config =
    (| config with title-str = Some(title-str); |)

  let set-author author config =
    (| config with author = [author]; |)

  let set-author-multiline authors config =
    (| config with author = authors; |)

  let set-author-str author-str config =
    (| config with author-str = Some(author-str); |)

  let set-date date config =
    (| config with date = Some(date); |)

  let set-subject subject config =
    (| config with subject = Some(subject); |)

  let set-keywords keywords config =
    (| config with keywords = keywords; |)

  let set-show-title show-title config =
    (| config with show-title = show-title; |)

  let set-show-toc show-toc config =
    (| config with show-toc = show-toc; |)

  let set-show-header show-header config =
    (| config with show-header = show-header; |)

  let set-show-footer show-footer config =
    (| config with show-footer = show-footer; |)

  let-mutable is-title-page-ref <- default-config#title-page
  let set-title-page title-page config =
    let () = is-title-page-ref <- title-page in
    (| config with title-page = title-page; |)

  let-mutable is-bib-page-ref <- default-config#bib-page
  let set-bib-page bib-page config =
    let () = is-bib-page-ref <- bib-page in
    (| config with bib-page = bib-page; |)

  let-mutable normal-font-size-ref <- default-config#normal-font-size
  let set-normal-font-size normal-font-size config =
    let () = normal-font-size-ref <- normal-font-size in
    (| config with normal-font-size = normal-font-size; |)

  let-mutable leading-ratio-ref <- default-config#leading-ratio
  let set-leading-ratio leading-ratio config =
    let () = leading-ratio-ref <- leading-ratio in
    (| config with leading-ratio = leading-ratio; |)

  let-mutable paragraph-margin-top-ratio-ref <- default-config#paragraph-margin-top-ratio
  let set-paragraph-margin-top-ratio paragraph-margin-top-ratio config =
    let () = paragraph-margin-top-ratio-ref <- paragraph-margin-top-ratio in
    (| config with paragraph-margin-top-ratio = paragraph-margin-top-ratio; |)

  let-mutable paragraph-margin-bottom-ratio-ref <- default-config#paragraph-margin-bottom-ratio
  let set-paragraph-margin-bottom-ratio paragraph-margin-bottom-ratio config =
    let () = paragraph-margin-bottom-ratio-ref <- paragraph-margin-bottom-ratio in
    (| config with paragraph-margin-bottom-ratio = paragraph-margin-bottom-ratio; |)

  let set-height-page height-page config =
    (| config with height-page = height-page; |)

  let set-width-page width-page config =
    (| config with width-page = width-page; |)

  let set-left-margin left-margin config =
    (| config with left-margin = left-margin; |)

  let set-right-margin right-margin config =
    (| config with right-margin = right-margin; |)

  let set-top-margin top-margin config =
    (| config with top-margin = top-margin; |)

  let set-bottom-margin bottom-margin config =
    (| config with bottom-margin = bottom-margin; |)

  let set-multicolumn multicolumn config =
    (| config with multicolumn = multicolumn; |)

  let set-columnsep columnsep config =
    (| config with columnsep = columnsep; |)

  let set-abstract abstract config =
    (| config with abstract = Some(abstract); |)

  let-mutable thanks-marks-ref <- default-config#thanks-marks
  let set-thanks-marks marks config =
      let () = thanks-marks-ref <- marks in
      (| config with thanks-marks = marks;|)

  let-mutable footnote-mark-ref <- default-config#footnote-mark
  let set-footnote-mark mark config =
      let () = footnote-mark-ref <- mark in
      (| config with footnote-mark = mark;|)

  let-mutable font-info-ref <- default-font
  let set-text-font-cjk font config =
    let font-info = config#font-info in
    let new = (| font-info with text-cjk = font; |) in
    let () = font-info-ref <- new in
    (| config with font-info = new; |)

  let set-text-font-latin font config =
    let font-info = config#font-info in
    let new = (| font-info with text-latin = font; |) in
    let () = font-info-ref <- new in
    (| config with font-info = new; |)

  let set-headline-font-cjk font config =
    let font-info = config#font-info in
    let new = (| font-info with headline-cjk = font; |) in
    let () = font-info-ref <- new in
    (| config with font-info = new; |)

  let set-headline-font-latin font config =
    let font-info = config#font-info in
    let new = (| font-info with headline-latin = font; |) in
    let () = font-info-ref <- new in
    (| config with font-info = new; |)


  let-mutable toc-title-ref <- default-config#toc-title
  let set-toc-title title config =
    let () = toc-title-ref <- title in
    (| config with toc-title = title; |)

  let-mutable figure-title-ref <- default-config#figure-title
  let set-figure-title title config =
    let () = figure-title-ref <- title in
    (| config with figure-title = title; |)

  let-mutable table-title-ref <- default-config#table-title
  let set-table-title title config =
    let () = table-title-ref <- title in
    (| config with table-title = title; |)

  let-mutable bib-title-ref <- default-config#bib-title
  let set-bib-title title config =
    let () = bib-title-ref <- title in
    (| config with bib-title = title; |)




  % フォント変更用関数
  let set-text-font ctx =
    let info = !font-info-ref in
    ctx |> set-font HanIdeographic info#text-cjk
        |> set-font Kana           info#text-cjk
        |> set-font Latin          info#text-latin
        |> set-font OtherScript    info#text-cjk


  let set-headline-font ctx =
    let info = !font-info-ref in
    ctx |> set-font HanIdeographic info#headline-cjk
        |> set-font Kana           info#headline-cjk
        |> set-font Latin          info#headline-latin
        |> set-font OtherScript    info#headline-cjk


  % フォントサイズ
  let font-size-normal () = !normal-font-size-ref
  let font-size-title () = !normal-font-size-ref *' 1.6
  let font-size-author () = !normal-font-size-ref *' 1.3
  let font-size-date () = !normal-font-size-ref *' 1.3
  let font-size-section () = !normal-font-size-ref *' 1.6
  let font-size-subsection () = !normal-font-size-ref *' 1.3
  let font-size-subsubsection () = !normal-font-size-ref *' 1.15


  let make-ctx width =
    let fs = font-size-normal () in
    get-initial-context width (command \math)
      |> set-font-size (font-size-normal ())
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-language OtherScript Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-text-font
      |> set-hyphen-penalty 100
      |> set-math-font `lmodern`
      |> set-manual-rising 0pt % 文字の上下の補正値
      |> set-text-color Color.black
      |> set-paragraph-margin
          (fs *' !paragraph-margin-top-ratio-ref)
          (fs *' !paragraph-margin-bottom-ratio-ref)
      |> set-leading (fs *' !leading-ratio-ref)
      |> set-min-gap-of-lines (fs *' !leading-ratio-ref)
      %|> set-min-paragraph-ascender-and-descender 0pt 0pt


    % ページ番号を開始する位置を記録する
    let register-start-page () =
      hook-page-break-block (fun pbinfo _ -> register-cross-reference `start-page` (arabic pbinfo#page-number))

    let string2int str =
      let clst =
        str
        |> string-explode
      in
      let-rec sub n cs =
        match cs with
        | [] -> 0
        | c::xs -> (
          let i =
            if 0x30 <= c && c <= 0x39 then
              c - 0x30
            else
              abort-with-message (`parse error : `# ^ string-unexplode [c] ^ `(` ^ arabic c ^ #`) in `# ^ str)
          in
          i * n + sub (n * 10) xs
        )
      in
      match clst with
      | [] -> 0
      | 0x2D::cs -> (sub 1 (List.reverse cs)) * -1
      | _ -> sub 1 (List.reverse clst)

    % ページ番号を開始する位置を取得する
    let get-start-page () =
      match get-cross-reference `start-page` with
      | None -> 1
      | Some (page-num) -> string2int page-num

    % unit型
    % satysfi-auxファイルにkey-value形式で書きだされる
    % (label ^ `:num`)がkeyでtitleがvalue
    let register-cross-reference-num label title =
      register-cross-reference (label ^ `:num`) title


    % inline-boxes型
    % satysfi-auxファイルにkey-value形式で書きだすが、
    % ページ番号を取得するためにblock-nilと同じ挙動をするblock-boxes
    % をフックとして埋め込む必要がある
    let register-cross-reference-page label =
      let start-page = get-start-page () in
      hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic (pbinfo#page-number - start-page + 1)))


    % block-boxes型
    % satysfi-auxファイルにkey-value形式で書きだすが、
    % ページ番号を取得するためにblock-nilと同じ挙動をするblock-boxes
    % をフックとして埋め込む必要がある
    let register-cross-reference-page-block label =
      let start-page = get-start-page () in
      hook-page-break-block (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic (pbinfo#page-number - start-page + 1)))


    let get-column-num x shifts =
      let-rec sub hook-x n shifts =
        match shifts with
        | [] -> n
        | x::xs -> (
          if hook-x <' x then
            n
          else
            sub hook-x (n + 1) xs
        )
      in
      sub x 1 shifts

    let register-cross-reference-column label shifts =
      let start-page = get-start-page () in
      let column-size = List.length shifts + 1 in
      let column-num page-num x =
        let p = page-num - start-page in
        p * column-size + (get-column-num x shifts)
      in
      hook-page-break (fun pbinfo (x, _) -> (
        let c = column-num pbinfo#page-number x in
        register-cross-reference (label ^ `:column`) (arabic c)
      ))

    let register-cross-reference-column-block label shifts =
      let start-page = get-start-page () in
      let column-size = List.length shifts + 1 in
      let column-num page-num x =
        let p = page-num - start-page in
        p * column-size + (get-column-num x shifts)
      in
      hook-page-break-block (fun pbinfo (x, _) -> (
        let c = column-num pbinfo#page-number x in
        register-cross-reference (label ^ `:column`) (arabic c)
      ))


  % 取得用関数 返り値はどちらもstring型
  % satysfi-auxファイルからkeyに合致するvalueを取得する
  % 対応するものが無い場合は`?`を返すようにする
  % そうすれば「これについては?ページ参照し」などのように、
  % 一応自然に見える（というかLaTeXの多くのクラスファイルがそういう挙動をするはず）
  let get-cross-reference-num label =
    match get-cross-reference (label ^ `:num`) with
      | None -> `?`
      | Some (label) -> label


  let get-cross-reference-page label =
    match get-cross-reference (label ^ `:page`) with
      | None -> `?`
      | Some (label) -> label

  let get-cross-reference-column label =
    match get-cross-reference (label ^ `:column`) with
      | None -> None
      | Some (s) -> Some(string2int s)


  % ハイパーリンクのキー登録とキー取得

  % 登録 string -> inline-boxes -> inline-boxes
  % ここのlength * length * length * lengthを変えると
  % キーが登録されたibの周りに余白が入る
  let register-doc-hyper-link label ib =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt)
      (Annot.register-location-frame label) ib


  % 取得 string -> inline-boxes -> inline-boxes
  % ここのlength * length * length * lengthを変えると
  % ジャンプできるibの周りに余白が入る
  % また、NoneをSome((0.5pt, Color.blue))などにすると、
  % そのような枠線が周りに着くことになる
  % この枠線は印刷されない（ことになっている）
  let doc-hyper-link label ib =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt)
      (Annot.link-to-location-frame label None) ib


  % \ref \ref-page 定義
  let-inline ctx \ref label =
    doc-hyper-link label
      (read-inline ctx (embed-string (get-cross-reference-num label)))


  let-inline ctx \ref-page label =
    doc-hyper-link label
      (read-inline ctx (embed-string (get-cross-reference-page label)))


  let-rec break-page column =
    if column <= 1 then
      clear-page
    else
      clear-page +++ break-page (column - 1)


  let-mutable toc-ref <- []
  let-mutable outline-ref <- []

  % 目次のタイトルとページ番号の間に入れるドットを生成する
  let-rec repeat-inline n ib =
    if n <= 0 then
      inline-nil
    else
      ib ++ (repeat-inline (n - 1) ib)


  let make-dots-line ctx text-width =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    % 丸め込み時の誤差とoverfull対策で-1している
    let n = round (text-width /' (get-natural-width ib)) - 1 in
    repeat-inline n ib

  let-mutable all-text-width-ref <- 0pt
  let-mutable text-width-ref <- 0pt
  let-mutable shifts-ref <- []

  % 浮動図のための可変値
  % 出力したいblock-boxesとそれが入力されたページ番号の組のリスト
  let-mutable float-boxes <- []
  let-mutable is-last-page <- false
  let-mutable now-page-num <- 0

  % 脚注関係のフラグ
  let-mutable is-first-footnote <- true
  let-mutable footnote-in-title <- false
  let-mutable thanks-lst <- []
  let footnote-line ctx =
    let ctx =
      ctx |> set-paragraph-margin 0pt 0pt
    in
    let wid = (get-text-width ctx) *' 0.8 in
    let margin = (font-size-normal ()) *' 0.5 in
    let ib =
      inline-graphics wid margin margin (fun (x, y) -> ([
        Gr.line (x,y) (x +' wid, y)
        |> stroke 0.5pt Color.black
      ])) ++ inline-fil
    in
    line-break true false ctx ib

  % 浮動図の出力を決める
  % 出力する部分のblock-boxesと新しいfloat-boxesの値を返す
  let break-float-boxes now-page-num text-height float-boxes =
    let-rec sub bb float-boxes =
      match float-boxes with
      | [] -> (bb, [])
      | (pageno, float-box)::xs -> (
        if pageno >= now-page-num then
          (bb, List.reverse float-boxes)
        else
          let new-bb = bb +++ float-box in
          if get-natural-length new-bb >' text-height then
            (bb, List.reverse float-boxes)
          else
            sub new-bb xs
      )
    in
    sub block-nil (List.reverse float-boxes)

  let document c main =
    % 参照の中身を確定させるために、configの方を先に評価しないといけない
    let all-text-width = c#width-page -' c#left-margin -' c#right-margin in
    let () = all-text-width-ref <- all-text-width in
    let text-width =
      (all-text-width -' c#columnsep *' (float (c#multicolumn - 1))) *' (1.0 /. float c#multicolumn)
    in
    let () = text-width-ref <- text-width in
    let seps =
      let-rec sub multicolumn =
        if multicolumn >= c#multicolumn then
          []
        else
          ((text-width +' c#columnsep) *' (float (multicolumn))) :: sub (multicolumn + 1)
      in
      sub 1
    in
    let () = shifts-ref <- seps in
    let text-height = c#height-page -' (c#top-margin +' c#bottom-margin) in
    let top-pad = 20pt in
    let ctx = make-ctx text-width in

    % ページサイズ
    let page = UserDefinedPaper(c#width-page, c#height-page) in


    let abstract-block =
      let ctx = make-ctx all-text-width in
      match c#abstract with
      | None -> block-nil
      | Some(abstract) -> read-block ctx abstract
    in

    let bb-title =
      let () = footnote-in-title <- true in
      let ctx = make-ctx all-text-width in
      if c#show-title then
        % TODO: タイトルを作成する
        let title-block = (
            let fs = font-size-title () in
            let ctx =
              ctx |> set-font-size fs
                  |> set-headline-font
                  |> set-paragraph-margin (fs *' !leading-ratio-ref) (fs *' !leading-ratio-ref)
            in
            let f it =
              line-break false false ctx (
                inline-fil ++ read-inline ctx it ++ inline-fil
              )
            in
            c#title
            |> List.map f
            |> List.fold-left (+++) block-nil
          )
        in
        let author-block =
          let f it =
            let fs = font-size-author () in
            let ctx =
              ctx |> set-font-size fs
                  |> set-headline-font
                  |> set-paragraph-margin (fs *' !leading-ratio-ref) (fs *' !leading-ratio-ref)
            in
            line-break false false ctx (
              inline-fil ++ read-inline ctx it ++ inline-fil
            )
          in
          c#author
          |> List.map f
          |> List.fold-left (+++) block-nil
        in
        let date-block =
          match c#date with
          | None -> block-nil
          | Some(date) -> (
            let fs = font-size-date () in
            let ctx =
              ctx |> set-font-size fs
                  |> set-headline-font
                  |> set-paragraph-margin
                      (fs *' !paragraph-margin-top-ratio-ref)
                      (fs *' !paragraph-margin-bottom-ratio-ref)
            in
            line-break false false ctx (
              inline-fil ++ read-inline ctx date ++ inline-fil
            )
          )
        in
        let () = footnote-in-title <- false in
        if c#title-page then
          let main =
            title-block +++
            block-skip (font-size-normal () *' 2.0) +++
            author-block +++
            block-skip (font-size-normal ()) +++
            date-block
          in
          let text-height =
            c#height-page -' c#top-margin -' c#bottom-margin
          in
            block-skip ((text-height -' get-natural-length main) *' 0.35)
            +++ main
        else
          title-block +++
          block-skip (font-size-normal () *' 0.5) +++
          author-block +++
          block-skip 0pt +++
          date-block +++
          block-skip 0pt +++
          abstract-block +++
          block-skip (font-size-normal () *' 1.0)
      else
        block-nil
    in

    % 参照系を確定させるために早めに評価する
    let bb-main = read-block ctx main in

    % コンテンツを表示させる部分の指定
    let pagecontf pbinfo =
      let ctx = make-ctx all-text-width in
      let start-page = get-start-page () in
      let () =
        now-page-num <- pbinfo#page-number - start-page + 1
      in
      let (bb, lst) = break-float-boxes !now-page-num (text-height -' top-pad) !float-boxes in
      let float-len =
        if c#show-title && pbinfo#page-number == 1 then
          get-natural-length bb-title
        else
          get-natural-length bb
      in
      let top-pad =
        if List.length lst == List.length !float-boxes then
          0pt
        else
          top-pad
      in
      (|
        text-height = text-height -' float-len -' top-pad;
        text-origin = (c#left-margin, c#top-margin +' float-len +' top-pad);
      |)
    in
    % ヘッダーとフッターの設定
    let pagepartsf pbinfo =
      let start-page = get-start-page () in
      let ctx = make-ctx all-text-width in
      let page-num = !now-page-num |> arabic |> embed-string in
      let ctx = set-paragraph-margin 0pt 0pt ctx in
      let header =
        if c#show-title && pbinfo#page-number == 1 then
          bb-title
        else if c#title-page && not (Option.is-none c#abstract) && pbinfo#page-number == 2 then
          let h = get-natural-length abstract-block in
          let space = (text-height -' h) *' 0.35 in
          block-skip space +++ abstract-block
        else
          let (bb, new-float-boxes) = break-float-boxes !now-page-num (text-height -' top-pad) !float-boxes in
          let () = float-boxes <- new-float-boxes in
          bb
      in
      let header-origin = (c#left-margin, c#top-margin) in
      let footer =
        if pbinfo#page-number < start-page then
          block-nil
        else
          if c#show-footer then
            let footer-main = line-break true true ctx (inline-fil ++ (read-inline ctx {#page-num;}) ++ inline-fil)
            in
              block-skip (c#bottom-margin *' 0.2) +++ footer-main
          else
            block-nil
      in
      let footer-origin = (c#left-margin, c#height-page -' c#bottom-margin) in
      (|
        header-content = header;
        header-origin = header-origin;
        footer-content = footer;
        footer-origin = footer-origin;
      |)
    in

    let columnhookf () =
      % 脚注のブロック部分をページ下部に埋め込む処理に関するフックを実行
      % ページの最初に一回登場する必要がある
      block-nil
    in
    let columnendhookf () =
      if !is-last-page then
        if List.length !float-boxes > 0 then
          block-skip 0pt
        else
          block-nil
      else
        block-nil
    in

    let bb-toc =
      if c#show-toc then
        % ここを弄ると目次の表示を変化させられる
        let f (sec-num-lst, label, num, title-it) =
          let page-num =
            label
            |> get-cross-reference-page
            |> embed-string
          in
          let main-ib =
            match List.length sec-num-lst with
            | 1 -> (
              let indent = font-size-section () in
              let ctx =
                ctx |> set-font-size (font-size-subsection ())
                    |> set-headline-font
              in
              let num-ib =
                num
                |> embed-string
                |> read-inline ctx
              in
              let title-ib = read-inline ctx title-it in
              let page-num-ib = read-inline ctx page-num in
              inline-skip indent ++ num-ib ++
              inline-skip (font-size-normal ()) ++ title-ib ++
              inline-fil ++ page-num-ib
            )
            | n -> (
              let indent =
                font-size-section () +' font-size-normal () *' (float (n - 1))
              in
              let ctx =
                ctx |> set-font-size (font-size-normal ())
              in
              let num-ib =
                num
                |> embed-string
                |> read-inline ctx
              in
              let title-ib = read-inline ctx title-it in
              let page-num-ib = read-inline ctx page-num in
              let fil-dots =
                make-dots-line ctx (
                  get-text-width ctx -'
                  get-natural-width (
                    inline-skip indent ++ num-ib ++
                    inline-skip (font-size-normal ()) ++
                    title-ib
                  ) -'
                  get-natural-width page-num-ib
                )
              in
              inline-skip indent ++ num-ib ++ inline-skip (font-size-normal ()) ++ title-ib ++ fil-dots ++ inline-fil ++ page-num-ib
            )
          in
            line-break true true ctx main-ib
        in
        let toc-main =
          !toc-ref
          |> List.reverse
          |> List.map f
          |> List.fold-left (+++) block-nil
        in
        let toc-title =
          let ctx =
            ctx |> set-font-size (font-size-section ())
                |> set-headline-font
          in
          ((read-inline ctx !toc-title-ref) ++ inline-fil)
          |> line-break true false ctx
        in
        if c#title-page then
          toc-title +++ toc-main +++ clear-page%(break-page c#multicolumn)
        else
          toc-title +++ toc-main +++ block-skip (font-size-normal ())
      else
        block-nil
    in

    let bb-last =
      hook-page-break-block (fun _ _ -> (is-last-page <- true))
    in

    let bb-thanks =
      !thanks-lst
      |> List.reverse
      |> List.mapi (fun i bb-fun -> (
        if i == 0 && not c#title-page then
          add-footnote ((footnote-line ctx) +++ (bb-fun ()))
        else
          add-footnote (bb-fun ())
      ))
      |> List.fold-left (++) inline-nil
      |> (fun ib -> (ib ++ inline-fil))
      |> line-break true true ctx
    in
    let bb-main =
      if c#title-page then
        if c#show-title && not (Option.is-none c#abstract) then
          (break-page c#multicolumn) +++ (break-page c#multicolumn) +++
            register-start-page () +++ bb-toc +++ bb-main
        else
          (break-page c#multicolumn) +++ register-start-page () +++ bb-toc +++ bb-main
      else
        register-start-page () +++ bb-toc +++ bb-main
    in
    let doc-main = page-break-multicolumn page seps columnhookf columnendhookf pagecontf pagepartsf (bb-thanks +++ bb-main +++ bb-last) in

    % ラベルを設置する
    let () = register-outline (List.reverse !outline-ref) in
    % ドキュメント情報を埋め込む
    let document-information =
      let doc-info-title =
        match c#title-str with
        | Some(s) -> Some(s)
        | None -> (
          match c#title with
          | [] -> None
          | lst -> (
            Some(
              lst
              |> List.map (read-inline ctx)
              |> List.fold-left (++) inline-nil
              |> extract-string
            )
          )
        )
      in
      let doc-info-author =
        match c#author-str with
        | Some(s) -> Some(s)
        | None -> (
          match c#author with
          | [] -> None
          | lst -> (
            Some(
              lst
              |> List.map (read-inline ctx)
              |> List.fold-left (++) inline-nil
              |> extract-string
            )
          )
        )
      in
      (|
        title = doc-info-title;
        author = doc-info-author;
        subject = c#subject;
        keywords = c#keywords;
      |)
    in
    let () = register-document-information document-information in
      doc-main


  let-block ctx +abstract ?:title-opt contents =
    let title-it =
      match title-opt with
      | None -> {概要}
      | Some(it) -> it
    in
    let pads =
      (font-size-normal () *' 2.0, font-size-normal () *' 2.0, 0pt, 0pt)
    in
    block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> (
      let font-size = get-font-size ctx in
      let ctx =
        ctx |> set-font-size (font-size *' 0.8)
      in
      let title-ctx =
        ctx |> set-headline-font
      in
      let title =
        line-break true false ctx (inline-fil ++ read-inline title-ctx title-it ++ inline-fil)
      in
      title +++ read-block ctx contents
    ))


  let indent ctx =
    let font-size = get-font-size ctx in
    let (_,font-ratio-cjk,_) = get-font Kana ctx in
    inline-skip (font-size *' font-ratio-cjk)

  let-block ctx +p it =
    let ib = read-inline ctx it in
    line-break true true ctx ((indent ctx) ++ ib ++ inline-fil)


  let-mutable sec-num-lst <- []
  let-mutable sec-num <- 0


  % TODO
  let section-title-format ctx sec-num-lst label-opt is-omit-num outline-title-opt title =
    let title-ctx =
      let font-size =
        match List.length sec-num-lst with
        | 1 -> font-size-section ()
        | 2 -> font-size-subsection ()
        | _ -> font-size-subsubsection ()
      in
      ctx |> set-headline-font
          |> set-font-size font-size
    in
    let title-ib =
      read-inline title-ctx title
    in
    let outline-title =
      match outline-title-opt with
      | Some(s) -> s
      | None -> extract-string title-ib
    in
    let label =
      match label-opt with
      | Some(s) -> s
      | None -> (
        `sec:` ^ (
          sec-num-lst
          |> List.reverse
          |> List.map arabic
          |> List.fold-right (fun s1 s2 -> s1^ `.` ^ s2) ` `
        )
      )
    in
    let num =
      if is-omit-num then
        ` `
      else
        % ここを弄れば節番号の表示を弄れる
        % 例えば階層が一番上なら
        % (arabic n ^ `章`)にする、とか
        match List.reverse sec-num-lst with
        | [] -> ` `
        | [n] -> arabic n
        | _ -> (
          sec-num-lst
          |> List.map arabic
          |> List.fold-right (fun s1 s2 -> s1^ `.` ^ s2) ` `
        )
    in
    let is-open = (List.length sec-num-lst) <= 3 in
    let () =
      outline-ref <- (List.length sec-num-lst, num ^ #` `# ^ outline-title, label, is-open) :: !outline-ref
    in
    let () = register-cross-reference-num label num in
    let () = toc-ref <- (sec-num-lst, label, num, title) :: !toc-ref in
    let num-ib =
      num
      |> embed-string
      |> read-inline title-ctx
    in
    let ib-hook = register-cross-reference-page label in
    let main =
      num-ib ++ ib-hook ++ inline-skip (font-size-normal ()) ++ title-ib
    in
    register-doc-hyper-link label main

  let-block ctx +section ?:label-opt ?:is-omit-num-opt ?:outline-title-opt title inner =
    let () = sec-num <- !sec-num + 1 in
    let old-sec-num-lst = !sec-num-lst in
    let () = sec-num-lst <- !sec-num::!sec-num-lst in
    let old-sec-num = !sec-num in
    let is-omit-num =
      match is-omit-num-opt with
      | Some(b) -> b
      | None -> false
    in
    let title-ib =
      section-title-format ctx (List.reverse !sec-num-lst) label-opt is-omit-num outline-title-opt title
    in
    let title-ctx =
      ctx |> set-paragraph-margin (font-size-normal () *' 2.0) (font-size-normal () *' 1.5)
    in
    let title-bb = line-break true false title-ctx (title-ib ++ inline-fil) in
    let () = sec-num <- 0 in
    let bb = read-block ctx inner in
    let () = sec-num-lst <- old-sec-num-lst in
    let () = sec-num <- old-sec-num in
    title-bb +++ bb


  let-mutable footnote-count <- 0
  let-mutable footnote-label-count <- 0
  let-inline ctx \footnote ?:is-show-num-opt ?:is-show-mark-opt content =
    let is-show-num =
      match is-show-num-opt with
      | Some(b) -> b
      | None -> true
    in
    let is-show-mark =
      match is-show-mark-opt with
      | Some(b) -> b
      | None -> true
    in
    let () =
      if is-show-num then
        footnote-count <- !footnote-count + 1
      else
        ()
    in
    let () = footnote-label-count <- !footnote-label-count + 1 in
    let label = `footnote:` ^ (arabic !footnote-label-count) in
    let mark =
      if is-show-mark then
        !footnote-mark-ref
      else
        {}
    in
    let num-it =
      if is-show-num then
        !footnote-count
        |> arabic
        |> embed-string
      else
        {}
    in
    let font-size = get-font-size ctx in
    % *1などの表示部分
    let ib =
      let ctx =
        ctx |> set-font-size (font-size *' 0.75)
            |> set-manual-rising (font-size *' 0.25)
      in
      (doc-hyper-link label (read-inline ctx {#mark;#num-it;}))
    in
    % ページ下部に出現するブロック
    let bb () =
      let ctx = make-ctx !text-width-ref in
      let font-size = get-font-size ctx in
      let ctx =
        ctx |> set-font-size (font-size *' 0.85)
            |> set-leading font-size
            |> set-paragraph-margin 0pt font-size
      in
      let num-ib =
        {#mark;#num-it;}
        |> read-inline ctx
        |> register-doc-hyper-link label
      in
      let content-ib = read-inline ctx content in
      block-frame-breakable ctx
        ((get-natural-width num-ib) +' font-size, 0pt, font-size, 0pt)
        VDecoSet.empty
        (fun ctx -> (
          let ib-hook = register-cross-reference-column label !shifts-ref in
          line-break false false ctx (
            inline-skip (((get-natural-width num-ib) +' font-size) *' -1.0) ++
            ib-hook ++ num-ib ++ inline-skip font-size ++
            content-ib ++ inline-fil
          )
        ))
    in
    let before-footnote-page =
      get-cross-reference-column (`footnote:` ^ arabic (!footnote-label-count - 1))
    in
    let now-footnote-page =
      get-cross-reference-column label
    in
    % 線を引く
    let bb-line =
      if !is-first-footnote then
        footnote-line ctx
      else
        match (before-footnote-page, now-footnote-page) with
        | (Some(i), Some(j)) -> (
          if i < j then footnote-line ctx else block-nil
        )
        | _ -> footnote-line ctx
    in
    let () = is-first-footnote <- false in
    if !footnote-in-title then
      let () = thanks-lst <- bb :: !thanks-lst in
      ib
    else
      let hook = add-footnote (bb-line +++ bb ()) in
      hook ++ ib

  let-mutable thanks-count <- 0
  let-inline ctx \thanks content =
    let ctx = make-ctx !text-width-ref in
    let () = thanks-count <- !thanks-count + 1 in
    let mark =
      if List.length !thanks-marks-ref == 0 then
        {}
      else
        let n =
          !thanks-count mod (List.length !thanks-marks-ref)
        in
        match List.nth (n - 1) !thanks-marks-ref with
        | None -> {}
        | Some(s) -> embed-string s
    in
    let font-size = font-size-author () in
    % †などの表示部分
    let ibk =
      let ctx =
        ctx |> set-font-size (font-size *' 0.8)
            |> set-manual-rising (font-size *' 0.25)
      in
      read-inline ctx {#mark;}
    in
    % ページ下部に出現するブロック
    let bbk () =
      let font-size = !normal-font-size-ref in
      let ctx =
        ctx |> set-font-size (font-size *' 0.85)
            |> set-leading font-size
            |> set-paragraph-margin 0pt font-size
      in
      let num-ib = read-inline ctx mark in
      let content-ib = read-inline ctx content in
      block-frame-breakable ctx
        ((get-natural-width num-ib) +' font-size, 0pt, font-size, 0pt)
        VDecoSet.empty
        (fun ctx -> (
          line-break false false ctx (
            inline-skip (((get-natural-width num-ib) +' font-size) *' -1.0) ++
            num-ib ++ inline-skip font-size ++
            content-ib ++ inline-fil
          )
        ))
    in
    let () =
      if not !is-title-page-ref then
        is-first-footnote <- false
      else
        ()
    in
    let () = thanks-lst <- bbk :: !thanks-lst in
    ibk

  let-mutable figure-count <- 0
  let-mutable table-count <- 0

  let-block ctx +figure ?:labelopt ?:position-opt caption inner =
    let ctx =
      match position-opt with
                    % headerに行くのでctxを専用に生成
      | Some(Top) -> make-ctx !all-text-width-ref
      | _ -> ctx
    in
    let () = figure-count <- !figure-count + 1 in
    let num = arabic !figure-count in
    let label =
      match labelopt with
      | Some(label) -> label
      | None -> `fig:` ^ num
    in
    let () = register-cross-reference-num label num in
    let ib-hook = register-cross-reference-page label in
    let fig-num-it = embed-string num in
    let caption-ib =
      let t = !figure-title-ref in
      inline-fil ++ read-inline ctx {#t;#fig-num-it;：#caption;} ++ ib-hook ++ inline-fil
      |> register-doc-hyper-link label
    in
    let bb = read-block ctx inner +++ (line-break false true ctx caption-ib) in
    let start-page = get-start-page () in
    match position-opt with
    | Some(Top) -> (
      hook-page-break-block (fun pbinfo _ -> (
        float-boxes <- (pbinfo#page-number - start-page + 1, bb) :: !float-boxes
      )) +++ block-skip 0pt
    )
    | _ -> bb


  let-block ctx +table ?:labelopt ?:position-opt caption inner =
    let ctx =
      match position-opt with
                    % headerに行くのでctxを専用に生成
      | Some(Top) -> make-ctx !all-text-width-ref
      | _ -> ctx
    in
    let () = table-count <- !table-count + 1 in
    let num = arabic !table-count in
    let label =
      match labelopt with
      | Some(label) -> label
      | None -> `table:` ^ num
    in
    let () = register-cross-reference-num label num in
    let ib-hook = register-cross-reference-page label in
    let fig-num-it = embed-string num in
    let caption-ib =
      let t = !table-title-ref in
      inline-fil ++ read-inline ctx {#t;#fig-num-it;：#caption;} ++ ib-hook ++ inline-fil
      |> register-doc-hyper-link label
    in
    let bb = (line-break false true ctx caption-ib) +++ read-block ctx inner in
    let start-page = get-start-page () in
    match position-opt with
    | Some(Top) -> (
      hook-page-break-block (fun pbinfo _ -> (
        float-boxes <- (pbinfo#page-number - start-page + 2, bb) :: !float-boxes
      )) +++ block-skip 0pt
    )
    | _ -> bb



  let-inline ctx \non-hyph str =
    let s-lst = string-explode str in
    let f i =
      let char = string-unexplode [i] in
      let ib = char |> embed-string |> read-inline ctx in
      ib
    in
    s-lst
    |> List.map f
    |> List.fold-left (++) inline-nil

  let-inline \url url = {\href (url) {\non-hyph(url);}}

  type bibitem = string * inline-text

  let bibitem key value = (key, value)

  let-mutable bib-counter <- 0

  let bib-scheme ctx key inner =
    let () = bib-counter <- !bib-counter + 1 in
    let s-num = arabic !bib-counter in
    let it-num = embed-string s-num in
    let label = `bibitem:` ^ key in
    let () = register-cross-reference-num label s-num in
    % [1] 著者名．出版年．「タイトル」．
    % のようなスタイルになっている
    % ここを修正すれば思い通りの状態にできる
    let text = {[#it-num;]} in
    let space = inline-skip (get-font-size ctx) in
    register-doc-hyper-link label (
      read-inline ctx text ++ space ++ read-inline ctx inner ++ inline-fil
    )

  let-block ctx +thebibliography bibitems =
    let main =
      bibitems
      |> List.map (fun (k, v) -> bib-scheme ctx k v)
      |> List.map (fun ib -> line-break true true ctx ib)
      |> List.fold-left (+++) block-nil
    in
    let header-text = !bib-title-ref in
    let header-ctx =
      ctx |> set-font-size (font-size-section ())
          |> set-headline-font
          |> set-paragraph-margin (font-size-section ()) (font-size-normal ())
    in
    let header-ib = read-inline header-ctx header-text ++ inline-fil in
    let header = line-break true false header-ctx header-ib in
    if !is-bib-page-ref then
      clear-page +++ header +++ main
    else
      header +++ main


  let cite-scheme ctx key =
    let label = `bibitem:` ^ key in
    let num = embed-string (get-cross-reference-num label) in
    doc-hyper-link label (read-inline ctx num)

  let-inline ctx \cite keys =
    let comma = read-inline ctx {,\ } in
    let join i ib1 ib2 =
      if i == 0 then
        ib2
      else
        % カンマ区切り結合をするための関数
        ib1 ++ comma ++ ib2
    in
    let bracket-open = read-inline ctx {[} in
    let bracket-close = read-inline ctx {]} in
    let main =
      keys
      |> List.map (fun key -> cite-scheme ctx key)
      |> List.fold-lefti join inline-nil
    in
    bracket-open ++ main ++ bracket-close

end
