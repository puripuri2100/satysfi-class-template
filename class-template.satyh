@require: math
@require: color
@require: annot
@require: vdecoset
@require: option
@require: pervasives
@require: base/list-ext
@require: base/int
@require: base/float
@require: num-conversion/num-conversion

module ClassTemplate : sig

  type position
  val top : position
  val here : position

  type config

  val document : config -> block-text -> document

  val default-config : config
  val set-title : inline-text -> config -> config
  val set-title-multiline : inline-text list -> config -> config
  val set-title-str : string -> config -> config
  val set-author : inline-text -> config -> config
  val set-author-multiline : inline-text list -> config -> config
  val set-author-str : string -> config -> config
  val set-date : inline-text -> config -> config
  val set-subject : string -> config -> config
  val set-keywords : string list -> config -> config
  val set-show-title : bool -> config -> config
  val set-show-toc : bool -> config -> config
  val set-show-header : bool -> config -> config
  val set-show-footer : bool -> config -> config
  val set-page-num : (int -> string) -> config -> config
  val set-header : (context -> int -> int -> string -> block-boxes) -> config -> config
  val set-footer : (context -> int -> int -> string -> block-boxes) -> config -> config
  val set-title-page : bool -> config -> config
  val set-bib-page : bool -> config -> config
  val set-normal-font-size : length -> config -> config
  val set-leading-ratio : float -> config -> config
  val set-paragraph-margin-top-ratio : float -> config -> config
  val set-paragraph-margin-bottom-ratio : float -> config -> config
  val set-height-page : length -> config -> config
  val set-width-page : length -> config -> config
  val set-left-margin : length -> config -> config
  val set-right-margin : length -> config -> config
  val set-top-margin : length -> config -> config
  val set-bottom-margin : length -> config -> config
  val set-multicolumn : int -> config -> config
  val set-columnsep : length -> config -> config
  val set-indent-length : (context -> length) -> config -> config
  val set-abstract : block-text -> config -> config
  val set-introduction : block-text -> config -> config
  val set-introduction-page-num : (int -> string) -> config -> config
  val set-introduction-header : (context -> int -> int -> string -> block-boxes) -> config -> config
  val set-introduction-footer : (context -> int -> int -> string -> block-boxes) -> config -> config
  val set-thanks-marks : string list -> config -> config
  val set-footnote-mark : inline-text -> config -> config
  val set-text-font-cjk   : (string * float * float) -> config -> config
  val set-text-font-latin : (string * float * float) -> config -> config
  val set-headline-font-cjk   : (string * float * float) -> config -> config
  val set-headline-font-latin : (string * float * float) -> config -> config
  val set-toc-title : inline-text -> config -> config
  val set-bib-title : inline-text -> config -> config
  val set-figure-title-fun : (int -> inline-text) -> config -> config
  val set-table-title-fun  : (int -> inline-text) -> config -> config
  val set-section-num-fun : (int list -> string) -> config -> config
  val set-section-font-size-ratio : (int -> float) -> config -> config
  val set-section-title-deco : (context -> int -> inline-boxes -> inline-boxes -> block-boxes) -> config -> config
  val set-toc-num-fun :  (int list -> string option) -> config -> config
  val set-toc-headline-font-depth : int -> config -> config
  val set-toc-font-size-ratio : (int -> float) -> config -> config
  val set-toc-deco : (context -> int -> string option -> inline-text -> string -> block-boxes) -> config -> config
  val set-toc-title-deco : (context -> inline-text -> block-boxes) -> config -> config
  val set-appendix-num-fun : (int list -> string) -> config -> config
  val set-appendix-font-size-ratio : (int -> float) -> config -> config
  val set-appendix-title-deco : (context -> int -> inline-boxes -> inline-boxes -> block-boxes) -> config -> config
  val set-appendix-toc-num-fun : (int list -> string option) -> config -> config


  val ignore-header-footer-inline : unit -> inline-boxes
  val ignore-header-footer-block : unit -> block-boxes

  val +abstract : [inline-text?; block-text] block-cmd

  val +appendix : [] block-cmd

  val +section : [string?; bool?; string?; inline-text; block-text] block-cmd
  val +p : [inline-text] block-cmd

  val \footnote : [inline-text?; inline-text] inline-cmd

  val \thanks : [inline-text?; inline-text] inline-cmd

  val +figure : [string?; position?; inline-text; block-text] block-cmd
  val +table : [string?; position?; inline-text; block-text] block-cmd

  val \url : [string] inline-cmd

  val \ref : [string] inline-cmd
  val \ref-page : [string] inline-cmd

  type bibitem
  val bibitem : string -> inline-text -> bibitem
  val +thebibliography : [bibitem list] block-cmd
  val \cite : [string list] inline-cmd

  val +clear-page : [] block-cmd

end = struct

  let-rec repeat-inline n ib =
    if n <= 0 then
      inline-nil
    else
      ib ++ (repeat-inline (n - 1) ib)



  let make-dots-line ctx text-width =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    % 丸め込み時の誤差とoverfull対策で-1している
    let n = round (text-width /' (get-natural-width ib)) - 1 in
    repeat-inline n ib



  type position =
    | Top
    | Here

  let top = Top
  let here = Here


  let default-footer ctx _ _ n =
    let n =
      n
      |> embed-string
      |> read-inline ctx
    in
    block-skip (get-font-size ctx) +++
    line-break true true ctx (inline-fil ++ n ++ inline-fil)


  type font-info = (|
    text-cjk       : (string * float * float);
    text-latin     : (string * float * float);
    headline-cjk   : (string * float * float);
    headline-latin : (string * float * float);
  |)


  let default-font = (|
    text-cjk       = (`ipaexm`, 1.0, 0.0);
    text-latin     = (`ipaexm`, 1.0, 0.0);
    headline-cjk   = (`ipaexg`, 1.0, 0.0);
    headline-latin = (`lmsans`, 1.0, 0.0);
  |)



  let-rec default-sec-num-f sec-num-lst =
    match sec-num-lst with
    | [] -> ` `
    | [n] -> arabic n
    | x::xs -> (arabic x) ^ `.` ^ (default-sec-num-f xs)


  let default-appendix-num-f sec-num-lst =
    let-rec sub lst =
      match lst with
      | [] -> ` `
      | [n] -> arabic n
      | x::xs -> (arabic x) ^ `.` ^ (sub xs)
    in
    match sec-num-lst with
    | [] -> ` `
    | n::xs -> (
      let n = n mod 26 in
      let s = string-unexplode [n + 0x40] in
      match xs with
      | [] -> `付録` ^ s
      | _  -> s ^ `.` ^ sub xs
    )


  let default-section-title-deco ctx depth num-ib title-ib =
    let num-width = get-natural-width num-ib in
    let space =
      if num-width <' 0.001pt then
        %% 節番号が無い場合
        0pt
      else
        get-font-size ctx *' 0.5
    in
    let p = (num-width +' space, 0pt, 0pt, 0pt) in
    block-frame-breakable ctx p VDecoSet.empty (fun ctx -> (
      let ib =
        inline-skip ((num-width +' space +' 2pt) *' -1.0) ++ num-ib ++ inline-skip space ++ title-ib ++ inline-fil
      in
      line-break true false ctx ib
    ))


  let default-toc-deco ctx depth num-str-opt title page-num =
    match num-str-opt with
    | None -> block-nil
    | Some(num-str) -> (
      let fs = get-font-size ctx in
      let (fs, indent) =
        match depth with
        | 1 -> (fs *' 1.3, fs *' 1.3)
        | n -> (fs *' 1.1, fs +' fs *' (float (n - 1)))
      in
      let ctx =
        ctx |> set-font-size fs
      in
      let num-ib = num-str |> embed-string |> read-inline ctx in
      let num-width = get-natural-width num-ib in
      let space =
        if string-length num-str == 0 then
          %% 節番号が無い場合
          0pt
        else
          fs *' 0.5
      in
      let page-ib = page-num |> embed-string |> read-inline ctx in
      let title-ib = read-inline ctx title in
      let p = (num-width +' space +' indent, 0pt, 0pt, 0pt) in
      block-frame-breakable ctx p VDecoSet.empty (fun ctx -> (
        let line-width = get-text-width ctx in
        let fil-ib =
          if depth == 1 then
            inline-fil
          else
            let title-width = get-natural-width title-ib in
            if line-width <' title-width then
              inline-fil
            else
              let len = line-width -' (get-natural-width page-ib) -' title-width -' fs in
              inline-fil ++ make-dots-line ctx len ++ inline-fil
        in
        let ib =
          inline-skip ((num-width +' space) *' (-1.0)) ++ num-ib ++
            inline-skip space ++ title-ib ++ fil-ib ++ page-ib
        in
        line-break true true ctx ib
      ))
    )


  let default-toc-title-deco ctx toc-title =
    let ib = read-inline ctx toc-title ++ inline-fil in
    line-break true false ctx ib


  % 設定の中身は単なるレコードだが、隠蔽することによって後方互換性を保てるようにする
  type config = (|
    title         : inline-text list;
    title-str     : string option;
    author        : inline-text list;
    author-str    : string option;
    date          : inline-text option;
    subject       : string option;
    keywords      : string list;
    show-title    : bool;
    show-toc      : bool;
    show-footer   : bool;
    show-header   : bool;
    page-num      : int -> string;
    header        : context -> int -> int -> string -> block-boxes;
    footer        : context -> int -> int -> string -> block-boxes;
    title-page    : bool;
    bib-page      : bool;
    normal-font-size : length;
    leading-ratio : float;
    paragraph-margin-top-ratio : float;
    paragraph-margin-bottom-ratio : float;
    height-page   : length;
    width-page    : length;
    left-margin   : length;
    right-margin  : length;
    top-margin    : length;
    bottom-margin : length;
    multicolumn   : int;
    columnsep     : length;
    indent-length : context -> length;
    abstract      : block-text option;
    introduction  : block-text option;
    introduction-page-num : int -> string;
    introduction-header   : context -> int -> int -> string -> block-boxes;
    introduction-footer   : context -> int -> int -> string -> block-boxes;
    thanks-marks  : string list;
    footnote-mark : inline-text;
    font-info     : font-info;
    toc-title     : inline-text;
    bib-title     : inline-text;
    figure-title-fun : int -> inline-text;
    table-title-fun  : int -> inline-text;
    section-num-fun : int list -> string;
    section-font-size-ratio : int -> float;
    section-title-deco : context -> int -> inline-boxes -> inline-boxes -> block-boxes;
    toc-num-fun   : int list -> string option;
    toc-headline-font-depth : int;
    toc-font-size-ratio : int -> float;
    toc-deco       : context -> int -> string option -> inline-text -> string -> block-boxes;
    toc-title-deco : context -> inline-text -> block-boxes;
    appendix-num-fun : int list -> string;
    appendix-font-size-ratio : int -> float;
    appendix-title-deco : context -> int -> inline-boxes -> inline-boxes -> block-boxes;
    appendix-toc-num-fun : int list -> string option;
  |)


  let default-config = (|
    title         = [];
    title-str     = None;
    author        = [];
    author-str    = None;
    date          = None;
    subject       = None;
    keywords      = [];
    show-title    = true;
    show-toc      = false;
    show-footer   = true;
    show-header   = true;
    page-num      = arabic;
    header        = fun _ _ _ _ -> block-nil;
    footer        = default-footer;
    title-page    = false;
    bib-page      = false;
    normal-font-size = 12pt;
    leading-ratio = 0.3;
    paragraph-margin-top-ratio = 0.3;
    paragraph-margin-bottom-ratio = 0.3;
    height-page   = 297mm;
    width-page    = 210mm;
    left-margin   = (210mm -' (12pt *' 40.0)) *' 0.5;
    right-margin  = (210mm -' (12pt *' 40.0)) *' 0.5;
    top-margin    = 25mm;
    bottom-margin = 25mm;
    multicolumn   = 1;
    columnsep     = 20pt;
    indent-length = fun ctx -> (
      let font-size = get-font-size ctx in
      let (_,font-ratio-cjk,_) = get-font Kana ctx in
      font-size *' font-ratio-cjk
    );
    abstract      = None;
    introduction  = None;
    introduction-page-num = fun i -> (
      match NumConversion.to-roman-lower i with
      | Some(s) -> s
      | None -> `?`
    );
    introduction-header   = fun _ _ _ _ -> block-nil;
    introduction-footer   = default-footer;
    thanks-marks  = [`†`; `‡`; `*`];
    footnote-mark = {\ \*};
    font-info     = default-font;
    toc-title     = {目次};
    bib-title     = {参考文献};
    figure-title-fun = fun i -> (let i-it = i |> arabic |> embed-string in {図#i-it;：});
    table-title-fun  = fun i -> (let i-it = i |> arabic |> embed-string in {表#i-it;：});
    section-num-fun = default-sec-num-f;
    section-font-size-ratio = fun i -> (
      match i with
      | 1 -> 1.6
      | 2 -> 1.3
      | _ -> 1.15
    );
    section-title-deco = default-section-title-deco;
    toc-num-fun   = fun l -> (if List.length l > 3 then None else Some(default-sec-num-f l));
    toc-headline-font-depth = 1;
    toc-font-size-ratio = fun i -> (if i == 1 then 1.3 else 1.1);
    toc-deco      = default-toc-deco;
    toc-title-deco = default-toc-title-deco;
    appendix-num-fun = default-appendix-num-f;
    appendix-font-size-ratio = fun i -> (
      match i with
      | 1 -> 1.6
      | 2 -> 1.3
      | _ -> 1.15
    );
    appendix-title-deco = default-section-title-deco;
    appendix-toc-num-fun = fun l -> (if List.length l > 3 then None else Some(default-appendix-num-f l));
  |)


  let-mutable config-ref <- default-config


  % configの中身を書き換えていく関数
  % こいつらの定義は愚直にやるしかない
  let set-title title config =
    (| config with title = [title]; |)

  let set-title-multiline title-lst config =
    (| config with title = title-lst; |)

  let set-title-str title-str config =
    (| config with title-str = Some(title-str); |)

  let set-author author config =
    (| config with author = [author]; |)

  let set-author-multiline authors config =
    (| config with author = authors; |)

  let set-author-str author-str config =
    (| config with author-str = Some(author-str); |)

  let set-date date config =
    (| config with date = Some(date); |)

  let set-subject subject config =
    (| config with subject = Some(subject); |)

  let set-keywords keywords config =
    (| config with keywords = keywords; |)

  let set-show-title show-title config =
    (| config with show-title = show-title; |)

  let set-show-toc show-toc config =
    (| config with show-toc = show-toc; |)

  let set-show-header show-header config =
    (| config with show-header = show-header; |)

  let set-show-footer show-footer config =
    (| config with show-footer = show-footer; |)

  let set-page-num f config =
    (| config with page-num = f; |)

  let set-header f config =
    (| config with header = f; |)

  let set-footer f config =
    (| config with footer = f; |)

  let set-title-page title-page config =
    (| config with title-page = title-page; |)

  let set-bib-page bib-page config =
    (| config with bib-page = bib-page; |)

  let set-normal-font-size normal-font-size config =
    (| config with normal-font-size = normal-font-size; |)

  let set-leading-ratio leading-ratio config =
    (| config with leading-ratio = leading-ratio; |)

  let set-paragraph-margin-top-ratio paragraph-margin-top-ratio config =
    (| config with paragraph-margin-top-ratio = paragraph-margin-top-ratio; |)

  let set-paragraph-margin-bottom-ratio paragraph-margin-bottom-ratio config =
    (| config with paragraph-margin-bottom-ratio = paragraph-margin-bottom-ratio; |)

  let set-height-page height-page config =
    (| config with height-page = height-page; |)

  let set-width-page width-page config =
    (| config with width-page = width-page; |)

  let set-left-margin left-margin config =
    (| config with left-margin = left-margin; |)

  let set-right-margin right-margin config =
    (| config with right-margin = right-margin; |)

  let set-top-margin top-margin config =
    (| config with top-margin = top-margin; |)

  let set-bottom-margin bottom-margin config =
    (| config with bottom-margin = bottom-margin; |)

  let set-multicolumn multicolumn config =
    (| config with multicolumn = multicolumn; |)

  let set-columnsep columnsep config =
    (| config with columnsep = columnsep; |)

  let set-indent-length f config =
    (| config with indent-length = f; |)

  let set-abstract abstract config =
    (| config with abstract = Some(abstract); |)

  let set-introduction introduction config =
    (| config with introduction = Some(introduction); |)

  let set-introduction-page-num f config =
    (| config with introduction-page-num = f; |)

  let set-introduction-header f config =
    (| config with introduction-header = f; |)

  let set-introduction-footer f config =
    (| config with introduction-footer = f; |)

  let set-thanks-marks marks config =
      (| config with thanks-marks = marks;|)

  let set-footnote-mark mark config =
      (| config with footnote-mark = mark;|)

  let set-text-font-cjk font config =
    let font-info = config#font-info in
    let new = (| font-info with text-cjk = font; |) in
    (| config with font-info = new; |)

  let set-text-font-latin font config =
    let font-info = config#font-info in
    let new = (| font-info with text-latin = font; |) in
    (| config with font-info = new; |)

  let set-headline-font-cjk font config =
    let font-info = config#font-info in
    let new = (| font-info with headline-cjk = font; |) in
    (| config with font-info = new; |)

  let set-headline-font-latin font config =
    let font-info = config#font-info in
    let new = (| font-info with headline-latin = font; |) in
    (| config with font-info = new; |)

  let set-toc-title title config =
    (| config with toc-title = title; |)

  let set-figure-title-fun title config =
    (| config with figure-title-fun = title; |)

  let set-table-title-fun title config =
    (| config with table-title-fun = title; |)

  let set-bib-title title config =
    (| config with bib-title = title; |)

  let set-section-num-fun f config =
    (| config with section-num-fun = f; |)

  let set-section-font-size-ratio ratio config =
    (| config with section-font-size-ratio = ratio; |)

  let set-section-title-deco f config =
    (| config with section-title-deco = f; |)

  let set-toc-num-fun f config =
    (| config with toc-num-fun = f; |)

  let set-toc-headline-font-depth i config =
    (| config with toc-headline-font-depth = i; |)

  let set-toc-font-size-ratio f config =
    (| config with toc-font-size-ratio = f; |)

  let set-toc-deco f config =
    (| config with toc-deco = f; |)

  let set-toc-title-deco f config =
    (| config with toc-title-deco = f; |)

  let set-appendix-num-fun f config =
    (| config with appendix-num-fun = f; |)

  let set-appendix-font-size-ratio ratio config =
    (| config with appendix-font-size-ratio = ratio; |)

  let set-appendix-title-deco f config =
    (| config with appendix-title-deco = f; |)

  let set-appendix-toc-num-fun f config =
    (| config with appendix-toc-num-fun = f; |)



  % フォント変更用関数
  let set-text-font ctx =
    let info = (!config-ref)#font-info in
    ctx |> set-font HanIdeographic info#text-cjk
        |> set-font Kana           info#text-cjk
        |> set-font Latin          info#text-latin
        |> set-font OtherScript    info#text-cjk


  let set-headline-font ctx =
    let info = (!config-ref)#font-info in
    ctx |> set-font HanIdeographic info#headline-cjk
        |> set-font Kana           info#headline-cjk
        |> set-font Latin          info#headline-latin
        |> set-font OtherScript    info#headline-cjk


  % フォントサイズ
  let font-size-normal ()        = (!config-ref)#normal-font-size
  let font-size-title ()         = (!config-ref)#normal-font-size *' 1.6
  let font-size-author ()        = (!config-ref)#normal-font-size *' 1.3
  let font-size-date ()          = (!config-ref)#normal-font-size *' 1.3


  let make-ctx width =
    let fs = font-size-normal () in
    get-initial-context width (command \math)
      |> set-font-size (font-size-normal ())
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-language OtherScript Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-text-font
      |> set-hyphen-penalty 100
      |> set-math-font `lmodern`
      |> set-manual-rising 0pt % 文字の上下の補正値
      |> set-text-color Color.black
      |> set-paragraph-margin
          (fs *' (!config-ref)#paragraph-margin-top-ratio)
          (fs *' (!config-ref)#paragraph-margin-bottom-ratio)
      |> set-leading (fs *' (!config-ref)#leading-ratio)
      |> set-min-gap-of-lines (fs *' (!config-ref)#leading-ratio)
      %|> set-min-paragraph-ascender-and-descender 0pt 0pt

      % Introductionの開始する位置を記録する
      let register-introduction-start-page () =
        hook-page-break-block (fun pbinfo _ -> (
          register-cross-reference `introduction-start-page` (arabic pbinfo#page-number)
        ))
  
      % ページ番号を開始する位置を取得する
      let get-introduction-start-page () =
        match get-cross-reference `introduction-start-page` with
        | None -> 1
        | Some (page-num) -> Int.of-string page-num
  
  
      % ページ番号を開始する位置を記録する
      let register-start-page () =
        hook-page-break-block (fun pbinfo _ -> (
          register-cross-reference `start-page` (arabic pbinfo#page-number)
        ))
  
      % ページ番号を開始する位置を取得する
      let get-start-page () =
        match get-cross-reference `start-page` with
        | None -> 1
        | Some (page-num) -> Int.of-string page-num
  
      % unit型
      % satysfi-auxファイルにkey-value形式で書きだされる
      % (label ^ `:num`)がkeyでtitleがvalue
      let register-cross-reference-num label title =
        register-cross-reference (label ^ `:num`) title
  
  
      % inline-boxes型
      % satysfi-auxファイルにkey-value形式で書きだすが、
      % ページ番号を取得するためにblock-nilと同じ挙動をするblock-boxes
      % をフックとして埋め込む必要がある
      let register-cross-reference-page label =
        hook-page-break (fun pbinfo _ -> (
          register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number)
        ))
  
  
      % block-boxes型
      % satysfi-auxファイルにkey-value形式で書きだすが、
      % ページ番号を取得するためにblock-nilと同じ挙動をするblock-boxes
      % をフックとして埋め込む必要がある
      let register-cross-reference-page-block label =
        hook-page-break-block (fun pbinfo _ -> (
          register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number)
        ))
  
  
      let get-column-num x shifts =
        let-rec sub hook-x n shifts =
          match shifts with
          | [] -> n
          | x::xs -> (
            if hook-x <' x then
              n
            else
              sub hook-x (n + 1) xs
          )
        in
        sub x 1 shifts
  
      let register-cross-reference-column label shifts =
        let column-size = List.length shifts + 1 in
        let column-num page-num x =
          page-num * column-size + (get-column-num x shifts)
        in
        hook-page-break (fun pbinfo (x, _) -> (
          let c = column-num pbinfo#page-number x in
          register-cross-reference (label ^ `:column`) (arabic c)
        ))
  
      let register-cross-reference-column-block label shifts =
        let column-size = List.length shifts + 1 in
        let column-num page-num x =
          page-num * column-size + (get-column-num x shifts)
        in
        hook-page-break-block (fun pbinfo (x, _) -> (
          let c = column-num pbinfo#page-number x in
          register-cross-reference (label ^ `:column`) (arabic c)
        ))
  
  
    % 取得用関数 返り値はどちらもstring型
    % satysfi-auxファイルからkeyに合致するvalueを取得する
    % 対応するものが無い場合は`?`を返すようにする
    % そうすれば「これについては?ページ参照し」などのように、
    % 一応自然に見える（というかLaTeXの多くのクラスファイルがそういう挙動をするはず）
    let get-cross-reference-num label =
      match get-cross-reference (label ^ `:num`) with
        | None -> `?`
        | Some (label) -> label
  
  
    let get-cross-reference-page label = get-cross-reference (label ^ `:page`)
  
    let get-cross-reference-page-fix label =
      let introduction-start-page = get-introduction-start-page () in
      let start-page = get-start-page () in
      let s =
        match get-cross-reference-page label with
        | None -> `?`
        | Some(s) -> (
          let n = Int.of-string s in
          if n < introduction-start-page then
            ` `
          else
            if n < start-page then
              (!config-ref)#introduction-page-num (n - introduction-start-page + 1)
            else
              (!config-ref)#page-num (n - introduction-start-page + 1)
        )
      in
      s
  
    let get-cross-reference-column label =
      match get-cross-reference (label ^ `:column`) with
        | None -> None
        | Some (s) -> Some(Int.of-string s)
  
  
    let register-cross-reference-point label =
      hook-page-break (fun _ (x,y) -> (
        let x-str = show-float (x /' 1pt) in
        let y-str = show-float (y /' 1pt) in
        let () = register-cross-reference (`point:`^label^`:x`) x-str in
        let () = register-cross-reference (`point:`^label^`:y`) y-str in
        ()
      ))
  
    let get-cross-reference-point label =
      let x-opt = get-cross-reference (`point:`^label^`:x`) in
      let y-opt = get-cross-reference (`point:`^label^`:y`) in
      match (x-opt, y-opt) with
      | (Some(sx), Some(sy)) -> (
        let x =
          match Float.of-string-opt sx with
          | Some(x) -> x
          | None -> abort-with-message (`parse error: `# ^ sx)
        in
        let y =
          match Float.of-string-opt sy with
          | Some(y) -> y
          | None -> abort-with-message (`parse error: `# ^ sy)
        in
        Some(1pt *' x, 1pt *' y)
      )
      | _ -> None

  % ハイパーリンクのキー登録とキー取得

  % 登録 string -> inline-boxes -> inline-boxes
  % ここのlength * length * length * lengthを変えると
  % キーが登録されたibの周りに余白が入る
  let register-doc-hyper-link label ib =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt)
      (Annot.register-location-frame label) ib


  % 取得 string -> inline-boxes -> inline-boxes
  % ここのlength * length * length * lengthを変えると
  % ジャンプできるibの周りに余白が入る
  % また、NoneをSome((0.5pt, Color.blue))などにすると、
  % そのような枠線が周りに着くことになる
  % この枠線は印刷されない（ことになっている）
  let doc-hyper-link label ib =
    inline-frame-breakable (0pt, 0pt, 0pt, 0pt)
      (Annot.link-to-location-frame label None) ib


  % \ref \ref-page 定義
  let-inline ctx \ref label =
    doc-hyper-link label
      (read-inline ctx (embed-string (get-cross-reference-num label)))


  let-inline ctx \ref-page label =
    label
    |> get-cross-reference-page-fix
    |> embed-string
    |> read-inline ctx
    |> doc-hyper-link label


  let-rec break-page column =
    if column <= 1 then
      clear-page
    else
      clear-page +++ break-page (column - 1)


  let-mutable ignore-header-footer-lst <- []

  let ignore-header-footer-inline () =
    hook-page-break (fun pbinfo _ -> (
      ignore-header-footer-lst <- pbinfo#page-number :: !ignore-header-footer-lst
    ))

  let ignore-header-footer-block () =
    hook-page-break-block (fun pbinfo _ -> (
      ignore-header-footer-lst <- pbinfo#page-number :: !ignore-header-footer-lst
    ))


  let-rec break-page-n n column =
    if n == 0 then
      block-nil
    else
      break-page column +++ break-page-n (n - 1) column


  let-mutable toc-ref <- []
  let-mutable outline-ref <- []


  let-mutable all-text-width-ref <- 0pt
  let-mutable text-width-ref <- 0pt
  let-mutable shifts-ref <- []

  % 浮動図のための可変値
  % 出力したいblock-boxesとそれが入力されたページ番号の組のリスト
  let-mutable float-boxes <- []
  let-mutable is-last-page <- false

  % 脚注関係のフラグ
  let-mutable is-first-footnote <- true
  let-mutable footnote-in-title <- false
  let-mutable thanks-lst <- []
  let footnote-line ctx =
    let ctx =
      ctx |> set-paragraph-margin 0pt 0pt
    in
    let wid = (get-text-width ctx) *' 0.8 in
    let margin = (font-size-normal ()) *' 0.5 in
    let ib =
      inline-graphics wid margin margin (fun (x, y) -> ([
        Gr.line (x,y) (x +' wid, y)
        |> stroke 0.5pt Color.black
      ])) ++ inline-fil
    in
    line-break true false ctx ib

  % 浮動図の出力を決める
  % 出力する部分のblock-boxesと新しいfloat-boxesの値を返す
  let break-float-boxes now-page-num text-height float-boxes =
    let-rec sub bb float-boxes =
      match float-boxes with
      | [] -> (bb, [])
      | (pageno, float-box)::xs -> (
        if pageno >= now-page-num then
          (bb, List.reverse float-boxes)
        else
          let new-bb = bb +++ float-box in
          if get-natural-length new-bb >' text-height then
            (bb, List.reverse float-boxes)
          else
            sub new-bb xs
      )
    in
    sub block-nil (List.reverse float-boxes)

  let document c main =
    % 参照の中身を確定させるために、configの方を先に評価しないといけない
    let () = config-ref <- c in
    let all-text-width = c#width-page -' c#left-margin -' c#right-margin in
    let () = all-text-width-ref <- all-text-width in
    let text-width =
      (all-text-width -' c#columnsep *' (float (c#multicolumn - 1))) *' (1.0 /. float c#multicolumn)
    in
    let () = text-width-ref <- text-width in
    let seps =
      let-rec sub multicolumn =
        if multicolumn >= c#multicolumn then
          []
        else
          ((text-width +' c#columnsep) *' (float (multicolumn))) :: sub (multicolumn + 1)
      in
      sub 1
    in
    let () = shifts-ref <- seps in
    let text-height = c#height-page -' (c#top-margin +' c#bottom-margin) in
    let top-pad = 20pt in
    let ctx = make-ctx text-width in

    % ページサイズ
    let page = UserDefinedPaper(c#width-page, c#height-page) in


    let abstract-block =
      let ctx = make-ctx all-text-width in
      match c#abstract with
      | None -> block-nil
      | Some(abstract) -> read-block ctx abstract
    in

    let bb-title =
      let () = footnote-in-title <- true in
      let ctx = make-ctx all-text-width in
      if c#show-title then
        let title-block = (
            let fs = font-size-title () in
            let ctx =
              ctx |> set-font-size fs
                  |> set-headline-font
                  |> set-paragraph-margin (fs *' (!config-ref)#leading-ratio) (fs *' (!config-ref)#leading-ratio)
            in
            let f it =
              line-break false false ctx (
                inline-fil ++ read-inline ctx it ++ inline-fil
              )
            in
            c#title
            |> List.map f
            |> List.fold-left (+++) block-nil
          )
        in
        let author-block =
          let f it =
            let fs = font-size-author () in
            let ctx =
              ctx |> set-font-size fs
                  |> set-headline-font
                  |> set-paragraph-margin (fs *' (!config-ref)#leading-ratio) (fs *' (!config-ref)#leading-ratio)
            in
            line-break false false ctx (
              inline-fil ++ read-inline ctx it ++ inline-fil
            )
          in
          c#author
          |> List.map f
          |> List.fold-left (+++) block-nil
        in
        let date-block =
          match c#date with
          | None -> block-nil
          | Some(date) -> (
            let fs = font-size-date () in
            let ctx =
              ctx |> set-font-size fs
                  |> set-headline-font
                  |> set-paragraph-margin
                      (fs *'  (!config-ref)#paragraph-margin-top-ratio)
                      (fs *'  (!config-ref)#paragraph-margin-bottom-ratio)
            in
            line-break false false ctx (
              inline-fil ++ read-inline ctx date ++ inline-fil
            )
          )
        in
        let () = footnote-in-title <- false in
        if c#title-page then
          let main =
            title-block +++
            block-skip (font-size-normal () *' 2.0) +++
            author-block +++
            block-skip (font-size-normal ()) +++
            date-block
          in
          let text-height =
            c#height-page -' c#top-margin -' c#bottom-margin
          in
            block-skip ((text-height -' get-natural-length main) *' 0.35)
            +++ main
        else
          title-block +++
          block-skip (font-size-normal () *' 0.5) +++
          author-block +++
          block-skip 0pt +++
          date-block +++
          block-skip 0pt +++
          abstract-block +++
          block-skip (font-size-normal () *' 1.0)
      else
        block-nil
    in
    let title-page-counter =
      if c#show-title && c#title-page then
        if Option.is-none c#abstract then
          1
        else
          2
      else
        0
    in

    % 参照系を確定させるために早めに評価する
    let introduction-opt =
      match c#introduction with
      | None -> None
      | Some(bt) -> (
        let bb = read-block ctx bt in
        Some(bb)
      )
    in
    let bb-main =
      read-block ctx main
    in

    % コンテンツを表示させる部分の指定
    let pagecontf pbinfo =
      let ctx = make-ctx all-text-width in
      let (bb, lst) = break-float-boxes pbinfo#page-number (text-height -' top-pad) !float-boxes in
      let float-len =
        if c#show-title && pbinfo#page-number == 1 then
          get-natural-length bb-title
        else
          get-natural-length bb
      in
      let top-pad =
        if List.length lst == List.length !float-boxes then
          0pt
        else
          top-pad
      in
      (|
        text-height = text-height -' float-len -' top-pad;
        text-origin = (c#left-margin, c#top-margin +' float-len +' top-pad);
      |)
    in
    % ヘッダーとフッターの設定
    let pagepartsf pbinfo =
      let introduction-start-page = get-introduction-start-page () in
      let start-page = get-start-page () in
      let ctx = make-ctx all-text-width in
      let page-num =
        if pbinfo#page-number < introduction-start-page then
          pbinfo#page-number
        else
          if pbinfo#page-number < start-page then
            pbinfo#page-number - introduction-start-page + 1
          else
            pbinfo#page-number - start-page + 1
      in
      let page-num-s =
        if pbinfo#page-number < introduction-start-page then
          ` `
        else
          if pbinfo#page-number < start-page then
            (!config-ref)#introduction-page-num page-num
          else
            (!config-ref)#page-num page-num
      in
      let ctx = set-paragraph-margin 0pt 0pt ctx in
      let header =
        let origin =
          if
            List.any (fun i -> i == pbinfo#page-number) !ignore-header-footer-lst
            ||
            not c#show-header
            ||
            pbinfo#page-number < introduction-start-page
          then
            block-nil
          else
            if pbinfo#page-number < start-page then
              let page-num-s = c#introduction-page-num page-num in
              c#introduction-header ctx pbinfo#page-number page-num page-num-s
            else
              let page-num-s = c#page-num page-num in
              c#header ctx pbinfo#page-number page-num page-num-s
        in
        let float-fig =
          if c#show-title && pbinfo#page-number == 1 then
            bb-title
          else if c#title-page && not (Option.is-none c#abstract) && pbinfo#page-number == 2 then
            let h = get-natural-length abstract-block in
            let space = (text-height -' h) *' 0.35 in
            block-skip space +++ abstract-block
          else
            let (bb, new-float-boxes) = break-float-boxes pbinfo#page-number (text-height -' top-pad) !float-boxes in
            let () = float-boxes <- new-float-boxes in
            bb
        in
        origin +++ float-fig
      in
      let header-origin = (c#left-margin, c#top-margin) in
      let footer =
        if
          List.any (fun i -> i == pbinfo#page-number) !ignore-header-footer-lst
          ||
          not c#show-footer
          ||
          pbinfo#page-number < introduction-start-page
        then
          block-nil
        else
          if pbinfo#page-number < start-page then
            let page-num-s = c#introduction-page-num page-num in
            c#introduction-footer ctx pbinfo#page-number page-num page-num-s
          else
            let page-num-s = c#page-num page-num in
            c#footer ctx pbinfo#page-number page-num page-num-s
      in
      let footer-origin = (c#left-margin, c#height-page -' c#bottom-margin) in
      (|
        header-content = header;
        header-origin = header-origin;
        footer-content = footer;
        footer-origin = footer-origin;
      |)
    in

    let columnhookf () =
      % 脚注のブロック部分をページ下部に埋め込む処理に関するフックを実行
      % ページの最初に一回登場する必要がある
      block-nil
    in
    let columnendhookf () =
      if !is-last-page then
        if List.length !float-boxes > 0 then
          block-skip 0pt
        else
          block-nil
      else
        block-nil
    in

    let bb-toc =
      let font-size-section = (font-size-normal ()) *' (c#section-font-size-ratio 1) in
      if c#show-toc then
        % ここを弄ると目次の表示を変化させられる
        let f (sec-num-lst-opt, depth, label, is-appendix, title-it) =
          let sec-num-str-opt =
            match sec-num-lst-opt with
            | None -> Some(` `) % 節番号が無い場合
            | Some(sec-num-lst) -> (
              if is-appendix then
                c#appendix-toc-num-fun sec-num-lst
              else
                c#toc-num-fun sec-num-lst
            )
          in
          let font-f =
            if depth <= c#toc-headline-font-depth then
              set-headline-font
            else
              set-text-font
          in
          let fs = font-size-normal () *' c#toc-font-size-ratio depth in
          let ctx =
            ctx |> font-f
                |> set-font-size fs
                |> set-leading (fs *' c#leading-ratio)
                |> set-paragraph-margin (fs *' c#paragraph-margin-top-ratio) (fs *' c#paragraph-margin-bottom-ratio)
          in
          let page-num = get-cross-reference-page-fix label in
          c#toc-deco ctx depth sec-num-str-opt title-it page-num
        in
        let toc-main =
          !toc-ref
          |> List.reverse
          |> List.map f
          |> List.fold-left (+++) block-nil
        in
        let toc-title =
          let ctx =
            ctx |> set-font-size font-size-section
                |> set-headline-font
          in
          (!config-ref)#toc-title
          |> (!config-ref)#toc-title-deco ctx
        in
        if c#title-page then
          toc-title +++ toc-main +++ clear-page%(break-page c#multicolumn)
        else
          toc-title +++ toc-main +++ block-skip (font-size-normal ())
      else
        block-nil
    in

    let bb-last =
      hook-page-break-block (fun _ _ -> (is-last-page <- true))
    in

    let bb-thanks =
      !thanks-lst
      |> List.reverse
      |> List.mapi (fun i bb-fun -> (
        if i == 0 && not c#title-page then
          add-footnote ((footnote-line ctx) +++ (bb-fun ()))
        else
          add-footnote (bb-fun ())
      ))
      |> List.fold-left (++) inline-nil
      |> (fun ib -> (ib ++ inline-fil))
      |> line-break true true ctx
    in
    let bb-main =
      let hook1 = register-introduction-start-page () in
      let hook2 = register-start-page () in
      let plus-new-pages =
        break-page-n title-page-counter c#multicolumn
      in
      let introduction-bb =
        match introduction-opt with
        | Some(bb) -> bb
        | None -> block-nil
      in
      let toc-before-break =
        if c#show-title && c#title-page then
          break-page c#multicolumn
        else
          block-nil
      in
      plus-new-pages +++ hook1 +++ introduction-bb +++
        toc-before-break +++ hook2 +++ bb-toc +++ bb-main
    in
    let doc-main = page-break-multicolumn page seps columnhookf columnendhookf pagecontf pagepartsf (bb-thanks +++ bb-main +++ bb-last) in

    % ラベルを設置する
    let () = register-outline (List.reverse !outline-ref) in
    % ドキュメント情報を埋め込む
    let document-information =
      let doc-info-title =
        match c#title-str with
        | Some(s) -> Some(s)
        | None -> (
          match c#title with
          | [] -> None
          | lst -> (
            Some(
              lst
              |> List.map (read-inline ctx)
              |> List.fold-left (++) inline-nil
              |> extract-string
            )
          )
        )
      in
      let doc-info-author =
        match c#author-str with
        | Some(s) -> Some(s)
        | None -> (
          match c#author with
          | [] -> None
          | lst -> (
            Some(
              lst
              |> List.map (read-inline ctx)
              |> List.fold-left (++) inline-nil
              |> extract-string
            )
          )
        )
      in
      (|
        title = doc-info-title;
        author = doc-info-author;
        subject = c#subject;
        keywords = c#keywords;
      |)
    in
    let () = register-document-information document-information in
      doc-main


  let-block ctx +abstract ?:title-opt contents =
    let title-it =
      match title-opt with
      | None -> {概要}
      | Some(it) -> it
    in
    let pads =
      (font-size-normal () *' 2.0, font-size-normal () *' 2.0, 0pt, 0pt)
    in
    block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> (
      let font-size = get-font-size ctx in
      let ctx =
        ctx |> set-font-size (font-size *' 0.8)
      in
      let title-ctx =
        ctx |> set-headline-font
      in
      let title =
        line-break true false ctx (inline-fil ++ read-inline title-ctx title-it ++ inline-fil)
      in
      title +++ read-block ctx contents
    ))


  let indent ctx =
    let len = (!config-ref)#indent-length ctx in
    inline-skip len

  let-block ctx +p it =
    let ib = read-inline ctx it in
    line-break true true ctx ((indent ctx) ++ ib ++ inline-fil)


  let-mutable is-appendix <- false

  let-mutable sec-num-lst <- []
  let-mutable sec-num <- 0
  let-mutable appendix-num <- 0


  let-block ctx +appendix =
    let () = is-appendix <- true in
    block-nil


  let section-title-format ctx is-omit-num sec-num-lst depth label is-omit-num outline-title-opt title =
    let title-ctx =
      let font-size =
        if !is-appendix then
          sec-num-lst
          |> List.length
          |> (!config-ref)#appendix-font-size-ratio
          |> (*') (font-size-normal ())
        else
          sec-num-lst
          |> List.length
          |> (!config-ref)#section-font-size-ratio
          |> (*') (font-size-normal ())
      in
      ctx |> set-headline-font
          |> set-font-size font-size
    in
    let title-ib =
      read-inline title-ctx title
    in
    let outline-title =
      match outline-title-opt with
      | Some(s) -> s
      | None -> extract-string title-ib
    in
    let num =
      if is-omit-num then
        ` `
      else
        if !is-appendix then
          (!config-ref)#appendix-num-fun sec-num-lst
        else
          (!config-ref)#section-num-fun sec-num-lst
    in
    let num =
      if is-omit-num then
        ` `
      else
        num
    in
    let is-open = depth <= 3 in
    let () =
      outline-ref <- (depth, num ^ #` `# ^ outline-title, label, is-open) :: !outline-ref
    in
    let () = register-cross-reference-num label num in
    let toc-data =
      if is-omit-num then
        (None, depth, label, !is-appendix, title)
      else
        (Some(sec-num-lst), depth, label, !is-appendix, title)
    in
    let () = toc-ref <- toc-data :: !toc-ref in
    let num-ib =
      if is-omit-num then
        inline-nil
      else
        num
        |> embed-string
        |> read-inline title-ctx
    in
    let ib-hook = register-cross-reference-page label in
    (register-doc-hyper-link label (num-ib ++ ib-hook), title-ib)

  let-mutable is-omit-num-ref <- false
  let-mutable depth-ref <- 0
  let-mutable section-label-counter <- 0
  let-block ctx +section ?:label-opt ?:is-omit-num-opt ?:outline-title-opt title inner =
    let () = section-label-counter <- !section-label-counter + 1 in
    let label =
      match label-opt with
      | Some(label) -> label
      | None -> `sec:` ^ (arabic !section-label-counter)
    in
    let old-depth = !depth-ref in
    let () = depth-ref <- !depth-ref + 1 in
    let (old-is-omit-num, is-omit-num) =
      if !is-omit-num-ref then
        (true, true)
      else
        match is-omit-num-opt with
        | Some(b) -> (
          let old = !is-omit-num-ref in
          let () = is-omit-num-ref <- b in
          (old, b)
        )
        | None -> (false, false)
    in
    let (old-sec-num-lst, old-sec-num) =
      if !is-appendix && List.length !sec-num-lst == 0 then
        let () = appendix-num <- !appendix-num + 1 in
        let old-sec-num-lst = !sec-num-lst in
        let () = sec-num-lst <- !appendix-num::!sec-num-lst in
        let old-sec-num = !appendix-num in
        (old-sec-num-lst, old-sec-num)
      else
        let () = sec-num <- !sec-num + 1 in
        let old-sec-num-lst = !sec-num-lst in
        let () = sec-num-lst <- !sec-num::!sec-num-lst in
        let old-sec-num = !sec-num in
        (old-sec-num-lst, old-sec-num)
    in
    let (num-ib, title-ib) =
      section-title-format ctx is-omit-num (List.reverse !sec-num-lst) !depth-ref label is-omit-num outline-title-opt title
    in
    let title-ctx =
      ctx |> set-paragraph-margin (font-size-normal () *' 2.0) (font-size-normal () *' 1.5)
    in
    let title-bb =
      if !is-appendix then
        (!config-ref)#appendix-title-deco title-ctx (List.length !sec-num-lst) num-ib title-ib
      else
        (!config-ref)#section-title-deco title-ctx (List.length !sec-num-lst) num-ib title-ib
    in
    let () = sec-num <- 0 in
    let bb = read-block ctx inner in
    let () = depth-ref <- old-depth in
    let () =
      match (old-is-omit-num, is-omit-num) with
      | (true, false) -> (
        is-omit-num-ref <- old-is-omit-num
      )
      | (false, true) -> (
        is-omit-num-ref <- old-is-omit-num
      )
      | _ -> ()
    in
    let () = sec-num-lst <- old-sec-num-lst in
    let () = sec-num <- old-sec-num in
    title-bb +++ bb


  let-mutable footnote-count <- 0
  let-mutable footnote-label-count <- 0
  let-inline ctx \footnote ?:manual-mark  content =
    let () =
      match manual-mark with
      | Some(_) -> ()
      | None -> footnote-count <- !footnote-count + 1
    in
    let () = footnote-label-count <- !footnote-label-count + 1 in
    let label = `footnote:` ^ (arabic !footnote-label-count) in
    let mark =
      match manual-mark with
      | Some(mark) -> mark
      | None -> (!config-ref)#footnote-mark
    in
    let num-it =
      match manual-mark with
      | Some(_) -> {}
      | None -> !footnote-count |> arabic |> embed-string
    in
    let font-size = get-font-size ctx in
    % *1などの表示部分
    let ib =
      let ctx =
        ctx |> set-font-size (font-size *' 0.75)
            |> set-manual-rising (font-size *' 0.25)
      in
      (doc-hyper-link label (read-inline ctx {#mark;#num-it;}))
    in
    % ページ下部に出現するブロック
    let bb () =
      let ctx = make-ctx !text-width-ref in
      let font-size = get-font-size ctx in
      let ctx =
        ctx |> set-font-size (font-size *' 0.85)
            |> set-leading font-size
            |> set-paragraph-margin 0pt font-size
      in
      let num-ib =
        {#mark;#num-it;}
        |> read-inline ctx
        |> register-doc-hyper-link label
      in
      let content-ib = read-inline ctx content in
      block-frame-breakable ctx
        ((get-natural-width num-ib) +' font-size, 0pt, font-size, 0pt)
        VDecoSet.empty
        (fun ctx -> (
          let ib-hook = register-cross-reference-column label !shifts-ref in
          line-break false false ctx (
            inline-skip (((get-natural-width num-ib) +' font-size) *' -1.0) ++
            ib-hook ++ num-ib ++ inline-skip font-size ++
            content-ib ++ inline-fil
          )
        ))
    in
    let before-footnote-page =
      get-cross-reference-column (`footnote:` ^ arabic (!footnote-label-count - 1))
    in
    let now-footnote-page =
      get-cross-reference-column label
    in
    % 線を引く
    let bb-line =
      if !is-first-footnote then
        footnote-line ctx
      else
        match (before-footnote-page, now-footnote-page) with
        | (Some(i), Some(j)) -> (
          if i < j then footnote-line ctx else block-nil
        )
        | _ -> footnote-line ctx
    in
    let () = is-first-footnote <- false in
    if !footnote-in-title then
      let () = thanks-lst <- bb :: !thanks-lst in
      ib
    else
      let hook = add-footnote (bb-line +++ bb ()) in
      hook ++ ib

  let-mutable thanks-count <- 0
  let-inline ctx \thanks ?:manual-mark content =
    let ctx = make-ctx !text-width-ref in
    let () = thanks-count <- !thanks-count + 1 in
    let mark =
      match manual-mark with
      | Some(m) -> m
      | None -> (
        if List.length (!config-ref)#thanks-marks == 0 then
          {}
        else
          let n =
            !thanks-count mod (List.length (!config-ref)#thanks-marks)
          in
          match List.nth (n - 1) (!config-ref)#thanks-marks with
          | None -> {}
          | Some(s) -> embed-string s
      )
    in
    let font-size = font-size-author () in
    % †などの表示部分
    let ibk =
      let ctx =
        ctx |> set-font-size (font-size *' 0.8)
            |> set-manual-rising (font-size *' 0.25)
      in
      read-inline ctx {#mark;}
    in
    % ページ下部に出現するブロック
    let bbk () =
      let font-size = font-size-normal () in
      let ctx =
        ctx |> set-font-size (font-size *' 0.85)
            |> set-leading font-size
            |> set-paragraph-margin 0pt font-size
      in
      let num-ib = read-inline ctx mark in
      let content-ib = read-inline ctx content in
      block-frame-breakable ctx
        ((get-natural-width num-ib) +' font-size, 0pt, font-size, 0pt)
        VDecoSet.empty
        (fun ctx -> (
          line-break false false ctx (
            inline-skip (((get-natural-width num-ib) +' font-size) *' -1.0) ++
            num-ib ++ inline-skip font-size ++
            content-ib ++ inline-fil
          )
        ))
    in
    let () =
      if not (!config-ref)#title-page then
        is-first-footnote <- false
      else
        ()
    in
    let () = thanks-lst <- bbk :: !thanks-lst in
    ibk

  let-mutable figure-count <- 0
  let-mutable table-count <- 0

  let-block ctx +figure ?:labelopt ?:position-opt caption inner =
    let ctx =
      match position-opt with
                    % headerに行くのでctxを専用に生成
      | Some(Top) -> make-ctx !all-text-width-ref
      | _ -> ctx
    in
    let () = figure-count <- !figure-count + 1 in
    let num = arabic !figure-count in
    let label =
      match labelopt with
      | Some(label) -> label
      | None -> `fig:` ^ num
    in
    let () = register-cross-reference-num label num in
    let ib-hook = register-cross-reference-page label in
    let fig-num-it = embed-string num in
    let caption-ib =
      let f = (!config-ref)#figure-title-fun in
      let title = f !figure-count in
      read-inline ctx {#title;#caption;} ++ ib-hook
      |> register-doc-hyper-link label
    in
    let line-width = get-text-width ctx in
    let ib =
      if line-width >' get-natural-width caption-ib then
        inline-fil ++ caption-ib ++ inline-fil
      else
        caption-ib ++ inline-fil
    in
    let bb = read-block ctx inner +++ (line-break false true ctx ib) in
    match position-opt with
    | Some(Top) -> (
      hook-page-break-block (fun pbinfo _ -> (
        float-boxes <- (pbinfo#page-number, bb) :: !float-boxes
      )) +++ block-skip 0pt
    )
    | _ -> bb


  let-block ctx +table ?:labelopt ?:position-opt caption inner =
    let ctx =
      match position-opt with
                    % headerに行くのでctxを専用に生成
      | Some(Top) -> make-ctx !all-text-width-ref
      | _ -> ctx
    in
    let () = table-count <- !table-count + 1 in
    let num = arabic !table-count in
    let label =
      match labelopt with
      | Some(label) -> label
      | None -> `table:` ^ num
    in
    let () = register-cross-reference-num label num in
    let ib-hook = register-cross-reference-page label in
    let fig-num-it = embed-string num in
    let caption-ib =
      let f = (!config-ref)#table-title-fun in
      let title = f !table-count in
      read-inline ctx {#title;#caption;} ++ ib-hook
      |> register-doc-hyper-link label
    in
    let line-width = get-text-width ctx in
    let ib =
      if line-width >' get-natural-width caption-ib then
        inline-fil ++ caption-ib ++ inline-fil
      else
        caption-ib ++ inline-fil
    in
    let bb = (line-break false true ctx ib) +++ read-block ctx inner in
    match position-opt with
    | Some(Top) -> (
      hook-page-break-block (fun pbinfo _ -> (
        float-boxes <- (pbinfo#page-number, bb) :: !float-boxes
      )) +++ block-skip 0pt
    )
    | _ -> bb



  let-inline ctx \non-hyph str =
    let s-lst = string-explode str in
    let f i =
      let char = string-unexplode [i] in
      let ib = char |> embed-string |> read-inline ctx in
      ib
    in
    s-lst
    |> List.map f
    |> List.fold-left (++) inline-nil

  let-inline \url url = {\href (url) {\non-hyph(url);}}

  type bibitem = string * inline-text

  let bibitem key value = (key, value)

  let-mutable bib-counter <- 0

  let bib-scheme ctx key inner =
    let () = bib-counter <- !bib-counter + 1 in
    let s-num = arabic !bib-counter in
    let it-num = embed-string s-num in
    let label = `bibitem:` ^ key in
    let () = register-cross-reference-num label s-num in
    % [1] 著者名．出版年．「タイトル」．
    % のようなスタイルになっている
    % ここを修正すれば思い通りの状態にできる
    let text = {[#it-num;]} in
    let space = inline-skip (get-font-size ctx) in
    let head-ib = read-inline ctx text ++ space in
    let head-width = get-natural-width head-ib in
    let pads = (head-width, 0pt, 0pt, 0pt) in
    block-frame-breakable ctx pads VDecoSet.empty (fun ctx -> (
      let ib =
        inline-skip (head-width *' -1.0) ++ head-ib ++ read-inline ctx inner ++ inline-fil
      in
      line-break true true ctx ib
    ))

  let-block ctx +thebibliography bibitems =
    let main =
      bibitems
      |> List.map (fun (k, v) -> bib-scheme ctx k v)
      |> List.fold-left (+++) block-nil
    in
    let header-text = (!config-ref)#bib-title in
    let font-size-section = (font-size-normal ()) *' ((!config-ref)#section-font-size-ratio 1) in
    let header-ctx =
      ctx |> set-font-size font-size-section
          |> set-headline-font
          |> set-paragraph-margin font-size-section (font-size-normal ())
    in
    let header-ib = read-inline header-ctx header-text ++ inline-fil in
    let header = line-break true false header-ctx header-ib in
    if (!config-ref)#bib-page then
      clear-page +++ header +++ main
    else
      header +++ main


  let cite-scheme ctx key =
    let label = `bibitem:` ^ key in
    let num = embed-string (get-cross-reference-num label) in
    doc-hyper-link label (read-inline ctx num)

  let-inline ctx \cite keys =
    let comma = read-inline ctx {,\ } in
    let join i ib1 ib2 =
      if i == 0 then
        ib2
      else
        % カンマ区切り結合をするための関数
        ib1 ++ comma ++ ib2
    in
    let bracket-open = read-inline ctx {[} in
    let bracket-close = read-inline ctx {]} in
    let main =
      keys
      |> List.map (fun key -> cite-scheme ctx key)
      |> List.fold-lefti join inline-nil
    in
    bracket-open ++ main ++ bracket-close


  let-block ctx +clear-page = clear-page


end
